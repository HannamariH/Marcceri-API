/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 100
#define YY_END_OF_BUFFER 101
static yyconst short int yy_acclist[276] =
    {   0,
       98,   98,  101,   99,  100,   98,   99,  100,   98,  100,
       99,  100,   10,   99,  100,   99,  100,   99,  100,   99,
      100,   11,   99,  100,   16,   99,  100,   14,   99,  100,
       15,   99,  100,   99,  100,   13,   99,  100,   17,   99,
      100,   12,   99,  100,   38,   99,  100,   33,   99,  100,
       37,   99,  100,   99,  100,   99,  100,   99,  100,   99,
      100,   99,  100,   19,   99,  100,   99,  100,   99,  100,
       99,  100,   99,  100,   99,  100,   99,  100,   25,   99,
      100,   99,  100,   99,  100,   99,  100,   18,   99,  100,
       99,  100,   99,  100,   99,  100,   99,  100,   99,  100,

       99,  100,   99,  100,   99,  100,   99,  100,   99,  100,
       99,  100,   99,  100,   99,  100,   99,  100,   25,   99,
      100,   99,  100,   99,  100,   99,  100,   99,  100,   99,
      100,   99,  100,   99,  100,   99,  100,   11,   98,   99,
      100,   25,   99,  100,   98,   32,    8,    2,   13,   36,
       35,   53,   54,    6,    7,   34,   34,   34,   24,   23,
       22,   24,   23,   22,   22,   23,   24,   30,   47,    6,
        7,   24,   34,   24,   47,   30,   22,   53,   22,   23,
       24,   34,    1,    9,   13,16387,16387,   29,   45,   77,
       44,   41,   43,   27,16387,   27,   21,16387,   21,   20,

    16387,   20,   31,   20,   21,   20,   21,   27,   42,   39,
       40,   29,   20,   42,    5,16387, 8195,   13,    4,   46,
       78,   71,   70,   68,   69,   75, 8195, 8195,   60,   61,
       74,   76,   72,   73,   60,   61,   58,   50,   59,   56,
       64,   79,   26,   62,   80,   49,   63,   58,   59,   48,
       67,   93,   82,   81,   86,   87,   51,   65,   97,   66,
       90,   55,   28,   95,   96,   83,   57,   94,   88,   89,
       91,   52,   84,   85,   92
    } ;

static yyconst short int yy_accept[394] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   13,   16,   18,
       20,   22,   25,   28,   31,   34,   36,   39,   42,   45,
       48,   51,   54,   56,   58,   60,   62,   64,   67,   69,
       71,   73,   75,   77,   79,   82,   84,   86,   88,   91,
       93,   95,   97,   99,  101,  103,  105,  107,  109,  111,
      113,  115,  117,  119,  122,  124,  126,  128,  130,  132,
      134,  136,  138,  142,  145,  146,  147,  148,  148,  148,
      148,  149,  149,  150,  150,  151,  152,  152,  152,  153,
      153,  153,  153,  153,  153,  153,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  155,  156,  157,  158,  159,  159,  159,  159,
      159,  159,  159,  159,  160,  161,  162,  162,  163,  164,
      165,  165,  168,  169,  169,  169,  169,  169,  169,  169,
      170,  170,  170,  170,  171,  172,  172,  173,  173,  173,
      173,  173,  173,  174,  176,  177,  179,  183,  183,  184,
      184,  185,  187,  188,  188,  189,  189,  189,  189,  189,
      189,  190,  190,  191,  191,  191,  191,  191,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  194,  194,  194,
      194,  196,  197,  199,  200,  202,  203,  203,  204,  204,
      206,  209,  209,  209,  209,  209,  209,  209,  209,  210,

      211,  211,  211,  212,  212,  212,  212,  212,  213,  213,
      213,  215,  217,  217,  218,  219,  219,  219,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  221,  222,  222,  223,  223,  223,  223,  223,  223,
      224,  224,  224,  224,  224,  225,  225,  225,  225,  225,
      225,  225,  226,  226,  226,  226,  227,  227,  227,  228,
      229,  229,  230,  230,  230,  230,  230,  230,  230,  231,
      231,  231,  231,  231,  232,  232,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  234,  235,  235,  237,  238,

      238,  238,  238,  238,  239,  240,  241,  242,  242,  242,
      243,  243,  243,  243,  243,  244,  244,  245,  245,  245,
      245,  245,  245,  245,  245,  246,  247,  248,  250,  250,
      251,  251,  251,  251,  252,  253,  253,  253,  253,  253,
      254,  255,  255,  255,  257,  257,  257,  258,  258,  258,
      258,  259,  259,  259,  259,  260,  260,  261,  261,  261,
      261,  261,  262,  262,  262,  263,  263,  264,  265,  265,
      266,  267,  267,  267,  267,  267,  267,  268,  269,  269,
      270,  271,  272,  273,  274,  274,  274,  274,  275,  275,
      275,  276,  276

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   10,   13,    1,   14,   15,   16,   17,
       15,   15,   15,   15,   15,   15,   15,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   31,   31,   34,   35,   36,   37,   38,
       31,   39,   40,   41,   42,   43,   44,   31,   45,   31,
        1,    1,    1,    1,    1,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   55,   56,   57,   58,
       59,   60,   55,   61,   62,   63,   64,   65,   66,   67,
       68,   55,   69,   70,   69,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    1,    1,    1,
        1,    1,    4,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1
    } ;

static yyconst short int yy_base[403] =
    {   0,
        0,    0,  660,  661,   69,   71,  638,  661,    0,  652,
      649,  661,  661,  661,  661,   60,   63,  661,  661,  635,
      661,  634,    0,    0,   23,   53,   26,   38,   59,   31,
      595,   78,   52,   46,   87,  592,  591,  601,   72,   60,
      590,  603,  598,   50,  109,   74,   51,  111,   59,  588,
      136,  124,  104,  151,  585,  584,  594,  123,   88,  583,
      596,  591,  153,  194,  173,  661,  661,    0,    0,  632,
      661,  182,  187,    0,  661,  661,    0,  590,  661,  584,
      591,  137,  582,  589,  570,  661,   45,  572,  574,  563,
      574,  575,  582,  573,  580,  576,  136,  139,  568,  564,

      558,    0,    0,    0,  101,  661,  559,  562,  553,  561,
      559,   67,  163,    0,  150,  168,  193,  553,  206,  209,
      558,  229,  565,  563,  159,  564,  550,  157,  563,  661,
      549,  552,  561,  661,  661,  181,  661,  552,  559,  222,
      256,  171,  226,  269,  221,  248,  292,    0,  661,  266,
      661,  333,  331,    0,  661,  543,  541,  548,  535,  542,
      661,  550,  661,  548,  536,  534,  541,  661,  532,  537,
      535,  530,  544,  526,  661,  538,  661,  523,  523,  535,
      346,  274,  347,  661,  359,  661,  521,  661,  536,  661,
      328,  528,   96,  522,  342,  524,  520,  515,  661,  523,

      520,  525,  661,  513,  512,  510,  367,  517,  163,  178,
      661,  377,  277,  661,  354,  270,  281,  661,  508,  506,
      510,  517,  517,  511,  501,  501,  499,  503,  497,  500,
      661,  661,  511,  661,  496,  493,  502,  389,  314,  355,
      504,  495,  502,  497,  661,  496,  503,  498,  313,  501,
      488,  661,  253,  495,  483,  661,  481,  479,  661,  661,
      478,  661,  482,  489,  492,  474,  486,  472,  661,  482,
      471,  466,  475,  661,  480,  661,  478,  478,  473,  480,
      376,  341,  461,  463,  477,  473,  462,  462,  456,  458,
      469,  467,  452,  462,  661,  661,  427,  661,  661,  433,

      428,  424,  430,  661,  661,  661,  387,  421,  432,  661,
      418,  428,  417,  415,  661,  429,  661,  419,  424,  409,
      422,  421,  408,  412,  661,  661,  661,  661,  403,  661,
      404,  397,  395,  661,  661,  402,  390,  385,  381,  396,
      661,  381,  380,  410,  386,  388,  395,  357,  358,  349,
      661,  344,  333,  327,  661,  331,  661,  393,  324,  315,
      213,  661,  295,  293,  661,  269,  661,  661,  278,  661,
      661,  257,  263,  255,  265,  262,  661,  661,  259,  661,
      661,  397,  661,  418,  228,  191,  194,  661,  110,   57,
      661,  661,  486,  490,  494,  497,  499,  501,  503,  505,

      507,  509
    } ;

static yyconst short int yy_def[403] =
    {   0,
      392,    1,  392,  392,  392,  392,  392,  392,  393,  394,
      395,  392,  392,  392,  392,  392,  396,  392,  392,  392,
      392,  392,  396,  397,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  396,  396,  396,  396,  396,  396,  396,
      396,  396,  396,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  393,  398,  395,
      392,  392,  399,  399,  392,  392,  400,  392,  392,  399,
      399,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  399,  399,  392,  392,  392,  392,  392,  392,  392,

      392,  399,  399,  399,  392,  392,  392,  392,  392,  392,
      392,  392,  399,  399,  399,  399,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  401,  392,  392,
      392,  392,  392,  402,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,    0,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392
    } ;

static yyconst short int yy_nxt[732] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   12,
       13,   14,   15,   16,   17,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       23,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   23,   43,   44,   45,   46,   47,   48,
       49,    4,   50,   51,    4,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,    4,    4,   62,   63,   64,
       65,   65,   65,   65,   72,   72,   72,   73,   73,   73,
       78,   88,   80,   90,   89,   79,   81,   91,   92,   99,
      157,  100,   93,  102,  103,  110,   90,  107,  156,  111,

       91,  108,   82,   83,  112,  129,  391,   78,   84,   94,
      109,   85,   79,  104,   95,  113,   96,   99,  130,  100,
       86,  126,   87,  114,  179,   97,  115,  116,   98,   88,
      127,  180,   89,  129,  128,  105,  117,   65,   83,   65,
       94,  173,   84,  243,   95,  118,  130,  106,  119,  120,
      121,  134,  135,  110,   65,   65,  122,  111,   82,   83,
      244,   94,  112,  173,   84,  390,   95,   85,   96,  107,
      173,  106,  126,  108,   65,   65,   86,   97,   87,  136,
       98,  127,  109,  168,  166,  128,  183,  137,  158,  169,
      119,  120,  165,  105,  150,  151,   72,   72,   72,  159,

      117,  152,  152,  152,  185,  106,  181,  194,  184,  118,
      195,  224,  119,  120,  121,  199,  206,  200,  196,  184,
      122,   65,  136,  138,  182,  237,  186,  139,  182,  106,
      137,  161,  182,  119,  120,  223,  182,  186,  232,  140,
      389,   65,  184,  141,  138,  186,  182,  111,  388,  142,
      182,  143,  144,  131,  145,  119,  146,  121,  182,  187,
       97,   86,  182,  147,  184,  190,  173,  186,  201,  192,
      193,  374,  182,  387,  208,  184,  373,  203,  186,  171,
      213,  213,  213,  174,  186,  259,  260,  190,  173,  163,
      151,  213,  213,  213,  182,  173,  259,  260,  191,  182,

      293,  204,  239,  197,  194,  384,  211,  207,  200,  383,
      294,  164,  177,  175,  382,  196,  381,  186,  159,  380,
      379,  182,  187,  239,  170,  182,  209,  378,  190,  198,
      377,  188,  210,  180,  176,  182,  214,  206,  214,  214,
      376,  214,  375,  239,  214,  205,  214,  215,  215,  215,
      190,  214,  214,  282,  214,  214,  239,  182,  289,  214,
      214,  191,  290,  216,  214,  216,  288,  214,  215,  215,
      215,  246,  214,  374,  239,  282,  247,  239,  216,  216,
      248,  315,  214,  282,  217,  214,  217,  373,  371,  370,
      214,  216,  246,  369,  283,  239,  246,  239,  247,  217,

      217,  247,  248,  315,  368,  248,  367,  366,  365,  216,
      315,  249,  217,  277,  278,  239,  283,  246,  279,  333,
      221,  314,  280,  247,  283,  312,  311,  248,  356,  313,
      217,  364,  372,  363,  277,  278,  249,  385,  362,  279,
      333,  358,  357,  355,  280,  359,  354,  360,  353,  356,
      386,  352,  351,  364,  372,  350,  333,  349,  281,  385,
      348,  347,  372,  346,  364,  356,  385,  359,  345,  360,
      344,  386,  343,  342,  341,  340,  339,  338,  337,  361,
      336,  335,  334,  332,  331,  330,  329,  386,   67,  328,
       67,   69,   69,   69,   70,   70,   70,   70,   70,   74,

       74,   77,   77,  148,  148,  153,  153,  154,  154,  212,
      212,  218,  218,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      228,  258,  257,  256,  255,  254,  253,  252,  251,  250,
      245,  242,  241,  240,  238,  237,  236,  235,  234,  233,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,

      222,  221,  220,  219,  206,  205,  204,  203,  202,  201,
      198,  197,  193,  192,  189,  188,  178,  177,  176,  175,
      174,  172,  171,  170,  167,  166,  165,  166,  165,  164,
      163,  162,  161,  160,  157,  156,  157,  156,  155,  149,
      133,  132,  131,  125,  124,  123,  101,  133,  132,  131,
      125,  124,  123,  101,   76,   75,   71,   68,   66,  392,
        3,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392
    } ;

static yyconst short int yy_chk[732] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    6,    6,   16,   16,   16,   17,   17,   17,
       25,   27,   26,   28,   27,   25,   26,   28,   29,   30,
       87,   30,   29,   32,   32,   34,   47,   33,   87,   34,

       47,   33,   26,   26,   34,   40,  390,   44,   26,   29,
       33,   26,   44,   32,   29,   35,   29,   49,   40,   49,
       26,   39,   26,   35,  112,   29,   35,   35,   29,   46,
       39,  112,   46,   59,   39,   32,   35,    5,   45,    6,
       48,  105,   45,  193,   48,   35,   59,   32,   35,   35,
       35,   51,   51,   53,   63,   63,   35,   53,   45,   45,
      193,   48,   53,  105,   45,  389,   48,   45,   48,   52,
      105,   51,   58,   52,   65,   65,   45,   48,   45,   54,
       48,   58,   52,   97,   98,   58,  115,   54,   82,   97,
       54,   54,   98,   51,   72,   72,   72,   72,   72,   82,

       54,   73,   73,   73,  116,   51,  113,  125,  115,   54,
      125,  209,   54,   54,   54,  128,  142,  128,  125,  115,
       54,   63,   64,   64,  136,  209,  116,   64,  113,   64,
       64,  142,  113,   64,   64,  210,  117,  116,  210,   64,
      387,   65,  119,   64,   64,  120,  136,   64,  386,   64,
      136,   64,   64,   64,   64,   64,   64,   64,  117,  117,
       64,   64,  117,   64,  119,  122,  143,  120,  140,  145,
      145,  361,  122,  385,  143,  119,  361,  140,  120,  145,
      150,  150,  150,  140,  146,  216,  216,  122,  143,  140,
      213,  213,  213,  213,  122,  143,  217,  217,  122,  141,

      253,  141,  182,  141,  141,  379,  146,  141,  146,  376,
      253,  141,  141,  141,  375,  141,  374,  146,  141,  373,
      372,  141,  141,  182,  144,  141,  144,  369,  147,  144,
      366,  144,  144,  144,  144,  147,  153,  147,  152,  153,
      364,  152,  363,  182,  153,  147,  152,  152,  152,  152,
      147,  181,  183,  239,  181,  183,  191,  147,  249,  181,
      183,  147,  249,  153,  185,  152,  249,  185,  215,  215,
      215,  195,  185,  360,  181,  239,  195,  191,  181,  183,
      195,  282,  212,  239,  153,  212,  152,  359,  356,  354,
      212,  185,  195,  353,  240,  181,  207,  191,  195,  181,

      183,  207,  195,  282,  352,  207,  350,  349,  348,  212,
      282,  195,  185,  238,  238,  181,  240,  207,  238,  307,
      207,  281,  238,  207,  240,  281,  281,  207,  340,  281,
      212,  347,  358,  346,  238,  238,  207,  382,  345,  238,
      307,  343,  342,  339,  238,  344,  338,  344,  337,  340,
      384,  336,  333,  347,  358,  332,  307,  331,  238,  382,
      329,  324,  358,  323,  347,  340,  382,  344,  322,  344,
      321,  384,  320,  319,  318,  316,  314,  313,  312,  344,
      311,  309,  308,  303,  302,  301,  300,  384,  393,  297,
      393,  394,  394,  394,  395,  395,  395,  395,  395,  396,

      396,  397,  397,  398,  398,  399,  399,  400,  400,  401,
      401,  402,  402,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  280,  279,  278,  277,  275,
      273,  272,  271,  270,  268,  267,  266,  265,  264,  263,
      261,  258,  257,  255,  254,  251,  250,  248,  247,  246,
      244,  243,  242,  241,  237,  236,  235,  233,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      208,  206,  205,  204,  202,  201,  200,  198,  197,  196,
      194,  192,  189,  187,  180,  179,  178,  176,  174,  173,
      172,  171,  170,  169,  167,  166,  165,  164,  162,  160,

      159,  158,  157,  156,  139,  138,  133,  132,  131,  129,
      127,  126,  124,  123,  121,  118,  111,  110,  109,  108,
      107,  101,  100,   99,   96,   95,   94,   93,   92,   91,
       90,   89,   88,   85,   84,   83,   81,   80,   78,   70,
       62,   61,   60,   57,   56,   55,   50,   43,   42,   41,
       38,   37,   36,   31,   22,   20,   11,   10,    7,    3,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1

#include <string.h>
#include <stdlib.h>
#include <malloc.h>

#include "typedef.h"
#include "mempool.h"
#include "ytab.h"


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 393 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 661 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.rulestr(yytext);
                  return MarcParser::STRING;
                }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str("");
                  return MarcParser::STRING;
                }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext+1);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return MarcParser::I1; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return MarcParser::I2; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::STAG;
                }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::FIX;
                }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return MarcParser::FIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
return *yytext;
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return MarcParser::SEP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->val=atoi(yytext);
                  return MarcParser::NUMERIC;
                }
	YY_BREAK
case 14:
YY_RULE_SETUP
return MarcParser::PLUS;
	YY_BREAK
case 15:
YY_RULE_SETUP
return MarcParser::MINUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
return MarcParser::MULTIPLY;
	YY_BREAK
case 17:
YY_RULE_SETUP
return MarcParser::DIVIDE;
	YY_BREAK
case 18:
YY_RULE_SETUP
return MarcParser::VARS;
	YY_BREAK
case 19:
YY_RULE_SETUP
return MarcParser::VARD;
	YY_BREAK
case 20:
YY_RULE_SETUP
return MarcParser::VAR_NTO;
	YY_BREAK
case 21:
YY_RULE_SETUP
return MarcParser::VAR_NSO;
	YY_BREAK
case 22:
YY_RULE_SETUP
return MarcParser::VAR_NT;
	YY_BREAK
case 23:
YY_RULE_SETUP
return MarcParser::VAR_NS;
	YY_BREAK
case 24:
YY_RULE_SETUP
return MarcParser::VAR_NO;
	YY_BREAK
case 25:
YY_RULE_SETUP
return MarcParser::VAR_N;
	YY_BREAK
case 26:
YY_RULE_SETUP
return MarcParser::VAR_NEWEST;
	YY_BREAK
case 27:
YY_RULE_SETUP
return MarcParser::VAR_NEW;
	YY_BREAK
case 28:
YY_RULE_SETUP
return MarcParser::CHECK;
	YY_BREAK
case 29:
YY_RULE_SETUP
return MarcParser::AND;
	YY_BREAK
case 30:
YY_RULE_SETUP
return MarcParser::OR;
	YY_BREAK
case 31:
YY_RULE_SETUP
return MarcParser::NOT;
	YY_BREAK
case 32:
YY_RULE_SETUP
return MarcParser::NE;
	YY_BREAK
case 33:
YY_RULE_SETUP
return MarcParser::EQ;
	YY_BREAK
case 34:
YY_RULE_SETUP
return MarcParser::_IN;
	YY_BREAK
case 35:
YY_RULE_SETUP
return MarcParser::GE;
	YY_BREAK
case 36:
YY_RULE_SETUP
return MarcParser::LE;
	YY_BREAK
case 37:
YY_RULE_SETUP
return MarcParser::GT;
	YY_BREAK
case 38:
YY_RULE_SETUP
return MarcParser::LT;
	YY_BREAK
case 39:
YY_RULE_SETUP
return MarcParser::STR;
	YY_BREAK
case 40:
YY_RULE_SETUP
return MarcParser::VAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
return MarcParser::LEN;
	YY_BREAK
case 42:
YY_RULE_SETUP
return MarcParser::STO;
	YY_BREAK
case 43:
YY_RULE_SETUP
return MarcParser::MEM;
	YY_BREAK
case 44:
YY_RULE_SETUP
return MarcParser::EXC;
	YY_BREAK
case 45:
YY_RULE_SETUP
return MarcParser::CLR;
	YY_BREAK
case 46:
YY_RULE_SETUP
return MarcParser::FROM;
	YY_BREAK
case 47:
YY_RULE_SETUP
return MarcParser::TO;
	YY_BREAK
case 48:
YY_RULE_SETUP
return MarcParser::BETWEEN;
	YY_BREAK
case 49:
YY_RULE_SETUP
return MarcParser::_STRICT;
	YY_BREAK
case 50:
YY_RULE_SETUP
return MarcParser::_DELETE;
	YY_BREAK
case 51:
YY_RULE_SETUP
return MarcParser::REPLACE;
	YY_BREAK
case 52:
YY_RULE_SETUP
return MarcParser::REPLACEOCC;
	YY_BREAK
case 53:
YY_RULE_SETUP
return MarcParser::AT;
	YY_BREAK
case 54:
YY_RULE_SETUP
return MarcParser::BY;
	YY_BREAK
case 55:
YY_RULE_SETUP
return MarcParser::BEGINNING;
	YY_BREAK
case 56:
YY_RULE_SETUP
return MarcParser::END;
	YY_BREAK
case 57:
YY_RULE_SETUP
return MarcParser::BOTH;
	YY_BREAK
case 58:
YY_RULE_SETUP
return MarcParser::BFIRST;
	YY_BREAK
case 59:
YY_RULE_SETUP
return MarcParser::EFIRST;
	YY_BREAK
case 60:
YY_RULE_SETUP
return MarcParser::BLAST;
	YY_BREAK
case 61:
YY_RULE_SETUP
return MarcParser::ELAST;
	YY_BREAK
case 62:
YY_RULE_SETUP
return MarcParser::WNUMBER;
	YY_BREAK
case 63:
YY_RULE_SETUP
return MarcParser::WSTRING;
	YY_BREAK
case 64:
YY_RULE_SETUP
return MarcParser::EXISTS;
	YY_BREAK
case 65:
YY_RULE_SETUP
return MarcParser::EXISTSIN;
	YY_BREAK
case 66:
YY_RULE_SETUP
return MarcParser::PRECEDES;
	YY_BREAK
case 67:
YY_RULE_SETUP
return MarcParser::FOLLOWS;
	YY_BREAK
case 68:
YY_RULE_SETUP
return MarcParser::REDO;
	YY_BREAK
case 69:
YY_RULE_SETUP
return MarcParser::SORT;
	YY_BREAK
case 70:
YY_RULE_SETUP
return MarcParser::NEXT;
	YY_BREAK
case 71:
YY_RULE_SETUP
return MarcParser::LAST;
	YY_BREAK
case 72:
YY_RULE_SETUP
return MarcParser::TABLE;
	YY_BREAK
case 73:
YY_RULE_SETUP
return MarcParser::UPPER;
	YY_BREAK
case 74:
YY_RULE_SETUP
return MarcParser::LOWER;
	YY_BREAK
case 75:
YY_RULE_SETUP
return MarcParser::YEAR;
	YY_BREAK
case 76:
YY_RULE_SETUP
return MarcParser::MONTH;
	YY_BREAK
case 77:
YY_RULE_SETUP
return MarcParser::DAY;
	YY_BREAK
case 78:
YY_RULE_SETUP
return MarcParser::HOUR;
	YY_BREAK
case 79:
YY_RULE_SETUP
return MarcParser::MINUTE;
	YY_BREAK
case 80:
YY_RULE_SETUP
return MarcParser::SECOND;
	YY_BREAK
case 81:
YY_RULE_SETUP
return MarcParser::ORDINAL;
	YY_BREAK
case 82:
YY_RULE_SETUP
return MarcParser::NEXTSUB;
	YY_BREAK
case 83:
YY_RULE_SETUP
return MarcParser::NEXTSUBIN;
	YY_BREAK
case 84:
YY_RULE_SETUP
return MarcParser::PREVIOUSSUB;
	YY_BREAK
case 85:
YY_RULE_SETUP
return MarcParser::PREVIOUSSUBIN;
	YY_BREAK
case 86:
YY_RULE_SETUP
return MarcParser::REGFIND;
	YY_BREAK
case 87:
YY_RULE_SETUP
return MarcParser::REGFIND;
	YY_BREAK
case 88:
YY_RULE_SETUP
return MarcParser::REGFINDNUM;
	YY_BREAK
case 89:
YY_RULE_SETUP
return MarcParser::REGFINDPOS;
	YY_BREAK
case 90:
YY_RULE_SETUP
return MarcParser::REGMATCH;
	YY_BREAK
case 91:
YY_RULE_SETUP
return MarcParser::REGREPLACE;
	YY_BREAK
case 92:
YY_RULE_SETUP
return MarcParser::REGREPLACETABLE;
	YY_BREAK
case 93:
YY_RULE_SETUP
return MarcParser::INTABLE;
	YY_BREAK
case 94:
YY_RULE_SETUP
return MarcParser::MOVEBEFORE;
	YY_BREAK
case 95:
YY_RULE_SETUP
return MarcParser::MOVEAFTER;
	YY_BREAK
case 96:
YY_RULE_SETUP
return MarcParser::MOVEFIRST;
	YY_BREAK
case 97:
YY_RULE_SETUP
return MarcParser::MOVELAST;
	YY_BREAK
case 98:
YY_RULE_SETUP
;
	YY_BREAK
case 99:
YY_RULE_SETUP
lex_error = true;
	YY_BREAK
case 100:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete []yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 393 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 393 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 392);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


