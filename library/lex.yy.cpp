/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 98
#define YY_END_OF_BUFFER 99
static yyconst short int yy_acclist[274] =
    {   0,
       96,   96,   99,   97,   98,   96,   97,   98,   96,   98,
       97,   98,   10,   97,   98,   97,   98,   97,   98,   97,
       98,   11,   97,   98,   16,   97,   98,   14,   97,   98,
       15,   97,   98,   97,   98,   13,   97,   98,   17,   97,
       98,   12,   97,   98,   38,   97,   98,   33,   97,   98,
       37,   97,   98,   97,   98,   97,   98,   97,   98,   97,
       98,   97,   98,   19,   97,   98,   97,   98,   97,   98,
       97,   98,   97,   98,   97,   98,   97,   98,   25,   97,
       98,   97,   98,   97,   98,   97,   98,   18,   97,   98,
       97,   98,   97,   98,   97,   98,   97,   98,   97,   98,

       97,   98,   97,   98,   97,   98,   97,   98,   97,   98,
       97,   98,   97,   98,   97,   98,   97,   98,   25,   97,
       98,   97,   98,   97,   98,   97,   98,   97,   98,   97,
       98,   97,   98,   97,   98,   97,   98,   11,   96,   97,
       98,   25,   97,   98,   96,   32,    8,    2,   13,   36,
       35,   53,   54,    6,    7,   34,   34,   34,   24,   23,
       22,   24,   23,   22,   22,   23,   24,   30,   47,    6,
        7,   24,   34,   24,   47,   30,   22,   53,   22,   23,
       24,   34,    1,    9,   13,16387,16387,   29,   45,   77,
       44,   41,   43,   27,16387,   27,   21,16387,   21,   20,

    16387,   20,   31,   20,   21,   20,   21,   27,   42,   39,
       40,   29,   20,   42,    5,16387, 8195,   13,    4,   46,
       78,   71,   70,   68,   69,   75, 8195, 8195,   60,   28,
       61,   74,   76,   72,   73,   60,   61,   58,   50,   59,
       56,   64,   79,   26,   62,   80,   49,   63,   58,   59,
       48,   67,   93,   82,   81,   86,   87,   51,   65,   66,
       90,   55,   95,   83,   57,   94,   88,   89,   91,   52,
       84,   85,   92
    } ;

static yyconst short int yy_accept[380] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   13,   16,   18,
       20,   22,   25,   28,   31,   34,   36,   39,   42,   45,
       48,   51,   54,   56,   58,   60,   62,   64,   67,   69,
       71,   73,   75,   77,   79,   82,   84,   86,   88,   91,
       93,   95,   97,   99,  101,  103,  105,  107,  109,  111,
      113,  115,  117,  119,  122,  124,  126,  128,  130,  132,
      134,  136,  138,  142,  145,  146,  147,  148,  148,  148,
      148,  149,  149,  150,  150,  151,  152,  152,  152,  153,
      153,  153,  153,  153,  153,  153,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  154,  154,

      154,  154,  155,  156,  157,  158,  159,  159,  159,  159,
      159,  159,  159,  159,  160,  161,  162,  162,  163,  164,
      165,  165,  168,  169,  169,  169,  169,  169,  169,  169,
      170,  170,  170,  170,  171,  172,  172,  173,  173,  173,
      173,  173,  173,  174,  176,  177,  179,  183,  183,  184,
      184,  185,  187,  188,  188,  189,  189,  189,  189,  189,
      189,  189,  190,  191,  191,  191,  191,  191,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  194,  194,  194,
      194,  196,  197,  199,  200,  202,  203,  203,  204,  204,
      206,  209,  209,  209,  209,  209,  209,  209,  209,  210,

      211,  211,  211,  212,  212,  212,  212,  212,  213,  213,
      215,  217,  217,  218,  219,  219,  219,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      221,  222,  222,  223,  223,  223,  223,  223,  223,  224,
      224,  224,  224,  224,  225,  225,  225,  225,  225,  225,
      225,  226,  226,  226,  226,  227,  227,  227,  228,  229,
      229,  230,  230,  230,  230,  231,  231,  231,  232,  232,
      232,  232,  232,  233,  233,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  235,  236,  236,  238,  239,  239,  239,  239,

      240,  241,  242,  243,  243,  243,  244,  244,  244,  245,
      245,  246,  246,  246,  246,  246,  246,  246,  246,  247,
      248,  249,  251,  251,  252,  252,  252,  253,  254,  254,
      254,  255,  256,  256,  256,  258,  258,  258,  259,  259,
      259,  260,  260,  260,  260,  261,  261,  261,  261,  261,
      262,  262,  262,  263,  263,  264,  264,  265,  265,  265,
      265,  265,  265,  266,  267,  267,  268,  269,  270,  271,
      272,  272,  272,  272,  273,  273,  273,  274,  274
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   10,   13,    1,   14,   15,   16,   17,
       15,   15,   15,   15,   15,   15,   15,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   31,   31,   34,   35,   36,   37,   38,
       31,   39,   40,   41,   42,   43,   44,   31,   45,   31,
        1,    1,    1,    1,    1,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   55,   62,   63,   64,   65,   66,   67,   68,
       69,   55,   70,   71,   70,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[72] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    1,    1,    1,
        1,    1,    4,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1
    } ;

static yyconst short int yy_base[389] =
    {   0,
        0,    0,  643,  644,   70,   72,  621,  644,    0,  635,
      632,  644,  644,  644,  644,   61,   64,  644,  644,  618,
      644,  617,    0,    0,   23,   54,   32,   40,   61,   32,
      577,   80,   53,   48,   93,  574,  573,  584,   57,   55,
      572,  586,  581,   60,  111,   53,   81,  116,   66,  570,
      119,  119,   94,  148,  567,  566,  577,   99,   92,  565,
      579,  574,  189,  231,  192,  644,  644,    0,    0,  615,
      644,  186,  189,    0,  644,  644,    0,  573,  644,  567,
      574,  108,  565,  572,  552,  644,  120,  566,  553,  545,
      556,  558,  565,  556,  563,  559,  122,  161,  550,  546,

      540,    0,    0,    0,  145,  644,  541,  544,  535,  543,
      541,   34,  153,    0,  173,  177,  174,  535,  180,  186,
      540,  243,  548,  546,  173,  547,  532,  121,  546,  644,
      531,  534,  544,  644,  644,  182,  644,  535,  542,  207,
      271,  181,  234,  284,  179,  274,  310,    0,  644,  215,
      644,  346,  359,    0,  644,  525,  523,  531,  517,  524,
      534,  644,  644,  531,  518,  516,  524,  644,  514,  519,
      517,  512,  527,  508,  644,  521,  644,  505,  505,  518,
      360,  287,  366,  644,  376,  644,  503,  644,  519,  644,
      347,  511,  190,  504,  366,  506,  502,  497,  644,  506,

      502,  508,  644,  495,  494,  492,  397,  500,  134,  644,
      389,  292,  644,  309,  219,  257,  644,  490,  488,  492,
      500,  500,  492,  483,  483,  481,  485,  479,  482,  644,
      644,  494,  644,  478,  475,  485,  400,  215,  226,  487,
      477,  485,  480,  644,  479,  486,  481,  337,  484,  470,
      644,  199,  478,  465,  644,  463,  461,  644,  644,  460,
      644,  464,  472,  475,  644,  470,  455,  644,  466,  454,
      449,  458,  644,  464,  644,  462,  462,  262,  370,  446,
      448,  463,  459,  447,  447,  441,  443,  455,  430,  412,
      423,  644,  644,  410,  644,  644,  419,  413,  408,  644,

      644,  644,  369,  406,  417,  644,  402,  413,  644,  416,
      644,  405,  411,  392,  407,  405,  395,  399,  644,  644,
      644,  644,  386,  644,  384,  370,  644,  644,  366,  348,
      379,  644,  343,  341,  383,  341,  342,  307,  334,  321,
      644,  297,  295,  294,  644,  344,  275,  273,  262,  644,
      283,  273,  644,  255,  644,  254,  644,  236,  221,  206,
      213,  204,  644,  644,  203,  644,  644,  394,  644,  406,
      175,   88,   90,  644,   52,   33,  644,  644,  475,  479,
      483,  486,  488,  490,  492,  494,  496,  498
    } ;

static yyconst short int yy_def[389] =
    {   0,
      378,    1,  378,  378,  378,  378,  378,  378,  379,  380,
      381,  378,  378,  378,  378,  378,  382,  378,  378,  378,
      378,  378,  382,  383,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  379,  384,  381,
      378,  378,  385,  385,  378,  378,  386,  378,  378,  385,
      385,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  385,  385,  378,  378,  378,  378,  378,  378,  378,

      378,  385,  385,  385,  378,  378,  378,  378,  378,  378,
      378,  378,  385,  385,  385,  385,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  387,  378,  378,
      378,  378,  378,  388,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,    0,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378
    } ;

static yyconst short int yy_nxt[716] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   12,
       13,   14,   15,   16,   17,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       23,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   23,   43,   44,   45,   46,   47,   48,
       49,    4,   50,   51,    4,    4,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,    4,    4,   62,   63,
       64,   65,   65,   65,   65,   72,   72,   72,   73,   73,
       73,   78,  377,   80,   88,   90,   79,   81,   89,   91,
       92,   99,  179,  100,   93,  102,  103,  110,  107,  180,

      129,  111,  108,   82,   83,   88,  126,  112,  376,   89,
       84,   94,  109,   85,  130,  104,  127,   95,   78,   96,
      128,  113,   86,   79,   87,   99,   90,  100,   97,  114,
       91,   98,  115,  116,  134,  135,  375,  129,  105,   65,
       83,   65,  117,  110,   84,   94,  374,  111,  126,   95,
      106,  130,  118,  112,  106,  119,  120,  121,  127,  158,
       82,   83,  128,  122,  107,  157,   94,   84,  108,  168,
       85,  159,   95,  156,   96,  169,  136,  105,  109,   86,
      199,   87,  200,   97,  137,  173,   98,  119,  120,  106,
       65,   65,  222,   65,   65,  231,  181,  117,  150,  151,

       72,   72,   72,  152,  152,  152,  166,  118,  173,  183,
      119,  120,  121,  185,  165,  173,  184,  182,  122,  182,
      373,  194,  186,  182,  195,  182,  206,  192,  193,  212,
      212,  212,  184,  196,  258,  259,  186,  242,  171,  184,
      182,  187,  162,  184,  182,  186,  290,  186,  182,  370,
      184,  369,  182,  201,  279,  243,  186,  291,   65,  136,
      138,   65,  368,  203,  139,  280,  106,  137,  367,  174,
      119,  120,  258,  259,  173,  163,  140,  279,  366,  190,
      141,  138,  208,   88,  111,  279,  182,  142,  280,  143,
      144,  131,  145,  119,  146,  121,  280,  173,   97,   86,

      365,  147,  190,  364,  173,  151,  212,  212,  212,  182,
      186,  308,  307,  191,  182,  238,  204,  363,  197,  194,
      362,  360,  207,  214,  214,  214,  359,  164,  177,  175,
      361,  196,  360,  210,  159,  200,  238,  182,  187,  359,
      170,  182,  179,  352,  186,  198,  190,  188,  209,  180,
      176,  213,  357,  182,  213,  206,  356,  238,  355,  213,
      214,  214,  214,  205,  213,  213,  352,  213,  213,  190,
      354,  213,  213,  213,  213,  238,  182,  352,  215,  213,
      191,  213,  286,  358,  213,  353,  287,  351,  238,  213,
      285,  215,  215,  350,  213,  245,  238,  213,  215,  216,

      246,  326,  213,  346,  247,  345,  358,  343,  215,  238,
      309,  344,  216,  216,  358,  342,  245,  238,  347,  216,
      348,  215,  326,  246,  276,  277,  245,  247,  341,  216,
      238,  246,  344,  309,  371,  247,  248,  340,  372,  326,
      309,  347,  216,  348,  339,  276,  277,  245,  338,  344,
      220,  337,  336,  349,  246,  335,  334,  371,  247,  372,
      333,  332,  331,  330,  371,  329,  328,  248,  327,  325,
      278,  324,  323,  322,  321,  320,  372,   67,  319,   67,
       69,   69,   69,   70,   70,   70,   70,   70,   74,   74,
       77,   77,  148,  148,  153,  153,  154,  154,  211,  211,

      217,  217,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  308,  307,  306,  305,  304,  303,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  293,  292,  289,  288,
      287,  286,  285,  284,  283,  282,  281,  275,  274,  273,
      272,  271,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  227,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  244,  241,  240,  239,  237,  236,  235,
      234,  233,  232,  231,  230,  229,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  206,  205,  204,
      203,  202,  201,  198,  197,  193,  192,  189,  188,  178,

      177,  176,  175,  174,  172,  171,  170,  167,  166,  165,
      166,  165,  164,  163,  162,  161,  160,  157,  156,  157,
      156,  155,  149,  133,  132,  131,  125,  124,  123,  101,
      133,  132,  131,  125,  124,  123,  101,   76,   75,   71,
       68,   66,  378,    3,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378
    } ;

static yyconst short int yy_chk[716] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    6,    6,   16,   16,   16,   17,   17,
       17,   25,  376,   26,   27,   28,   25,   26,   27,   28,
       29,   30,  112,   30,   29,   32,   32,   34,   33,  112,

       40,   34,   33,   26,   26,   46,   39,   34,  375,   46,
       26,   29,   33,   26,   40,   32,   39,   29,   44,   29,
       39,   35,   26,   44,   26,   49,   47,   49,   29,   35,
       47,   29,   35,   35,   51,   51,  373,   59,   32,    5,
       45,    6,   35,   53,   45,   48,  372,   53,   58,   48,
       32,   59,   35,   53,   51,   35,   35,   35,   58,   82,
       45,   45,   58,   35,   52,   87,   48,   45,   52,   97,
       45,   82,   48,   87,   48,   97,   54,   51,   52,   45,
      128,   45,  128,   48,   54,  105,   48,   54,   54,   51,
       63,   63,  209,   65,   65,  209,  113,   54,   72,   72,

       72,   72,   72,   73,   73,   73,   98,   54,  105,  115,
       54,   54,   54,  116,   98,  105,  119,  117,   54,  113,
      371,  125,  120,  113,  125,  136,  142,  145,  145,  150,
      150,  150,  115,  125,  215,  215,  116,  193,  145,  119,
      117,  117,  142,  115,  117,  120,  252,  116,  136,  365,
      119,  362,  136,  140,  238,  193,  120,  252,   63,   64,
       64,   65,  361,  140,   64,  239,   64,   64,  360,  140,
       64,   64,  216,  216,  143,  140,   64,  238,  359,  122,
       64,   64,  143,   64,   64,  238,  122,   64,  239,   64,
       64,   64,   64,   64,   64,   64,  239,  143,   64,   64,

      358,   64,  122,  356,  143,  212,  212,  212,  212,  122,
      146,  278,  278,  122,  141,  182,  141,  354,  141,  141,
      352,  349,  141,  214,  214,  214,  349,  141,  141,  141,
      351,  141,  348,  146,  141,  146,  182,  141,  141,  347,
      144,  141,  144,  338,  146,  144,  147,  144,  144,  144,
      144,  152,  344,  147,  152,  147,  343,  182,  342,  152,
      152,  152,  152,  147,  153,  181,  338,  153,  181,  147,
      340,  183,  153,  181,  183,  191,  147,  338,  152,  183,
      147,  185,  248,  346,  185,  339,  248,  337,  181,  185,
      248,  153,  181,  336,  211,  195,  191,  211,  183,  152,

      195,  303,  211,  334,  195,  333,  346,  330,  185,  181,
      279,  331,  153,  181,  346,  329,  195,  191,  335,  183,
      335,  211,  303,  195,  237,  237,  207,  195,  326,  185,
      181,  207,  331,  279,  368,  207,  195,  325,  370,  303,
      279,  335,  211,  335,  323,  237,  237,  207,  318,  331,
      207,  317,  316,  335,  207,  315,  314,  368,  207,  370,
      313,  312,  310,  308,  368,  307,  305,  207,  304,  299,
      237,  298,  297,  294,  291,  290,  370,  379,  289,  379,
      380,  380,  380,  381,  381,  381,  381,  381,  382,  382,
      383,  383,  384,  384,  385,  385,  386,  386,  387,  387,

      388,  388,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  277,  276,  274,  272,  271,  270,  269,  267,  266,
      264,  263,  262,  260,  257,  256,  254,  253,  250,  249,
      247,  246,  245,  243,  242,  241,  240,  236,  235,  234,
      232,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  208,  206,  205,  204,  202,  201,  200,
      198,  197,  196,  194,  192,  189,  187,  180,  179,  178,
      176,  174,  173,  172,  171,  170,  169,  167,  166,  165,
      164,  161,  160,  159,  158,  157,  156,  139,  138,  133,
      132,  131,  129,  127,  126,  124,  123,  121,  118,  111,

      110,  109,  108,  107,  101,  100,   99,   96,   95,   94,
       93,   92,   91,   90,   89,   88,   85,   84,   83,   81,
       80,   78,   70,   62,   61,   60,   57,   56,   55,   50,
       43,   42,   41,   38,   37,   36,   31,   22,   20,   11,
       10,    7,    3,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,

      378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
      378,  378,  378,  378,  378
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1

#include <string.h>
#include <stdlib.h>
#include <malloc.h>

#include "typedef.h"
#include "mempool.h"
#include "ytab.h"


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 379 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 644 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.rulestr(yytext);
                  return MarcParser::STRING;
                }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str("");
                  return MarcParser::STRING;
                }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext+1);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return MarcParser::I1; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return MarcParser::I2; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::STAG;
                }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::FIX;
                }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return MarcParser::FIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
return *yytext;
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return MarcParser::SEP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->val=atoi(yytext);
                  return MarcParser::NUMERIC;
                }
	YY_BREAK
case 14:
YY_RULE_SETUP
return MarcParser::PLUS;
	YY_BREAK
case 15:
YY_RULE_SETUP
return MarcParser::MINUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
return MarcParser::MULTIPLY;
	YY_BREAK
case 17:
YY_RULE_SETUP
return MarcParser::DIVIDE;
	YY_BREAK
case 18:
YY_RULE_SETUP
return MarcParser::VARS;
	YY_BREAK
case 19:
YY_RULE_SETUP
return MarcParser::VARD;
	YY_BREAK
case 20:
YY_RULE_SETUP
return MarcParser::VAR_NTO;
	YY_BREAK
case 21:
YY_RULE_SETUP
return MarcParser::VAR_NSO;
	YY_BREAK
case 22:
YY_RULE_SETUP
return MarcParser::VAR_NT;
	YY_BREAK
case 23:
YY_RULE_SETUP
return MarcParser::VAR_NS;
	YY_BREAK
case 24:
YY_RULE_SETUP
return MarcParser::VAR_NO;
	YY_BREAK
case 25:
YY_RULE_SETUP
return MarcParser::VAR_N;
	YY_BREAK
case 26:
YY_RULE_SETUP
return MarcParser::VAR_NEWEST;
	YY_BREAK
case 27:
YY_RULE_SETUP
return MarcParser::VAR_NEW;
	YY_BREAK
case 28:
YY_RULE_SETUP
return MarcParser::CHECK;
	YY_BREAK
case 29:
YY_RULE_SETUP
return MarcParser::AND;
	YY_BREAK
case 30:
YY_RULE_SETUP
return MarcParser::OR;
	YY_BREAK
case 31:
YY_RULE_SETUP
return MarcParser::NOT;
	YY_BREAK
case 32:
YY_RULE_SETUP
return MarcParser::NE;
	YY_BREAK
case 33:
YY_RULE_SETUP
return MarcParser::EQ;
	YY_BREAK
case 34:
YY_RULE_SETUP
return MarcParser::_IN;
	YY_BREAK
case 35:
YY_RULE_SETUP
return MarcParser::GE;
	YY_BREAK
case 36:
YY_RULE_SETUP
return MarcParser::LE;
	YY_BREAK
case 37:
YY_RULE_SETUP
return MarcParser::GT;
	YY_BREAK
case 38:
YY_RULE_SETUP
return MarcParser::LT;
	YY_BREAK
case 39:
YY_RULE_SETUP
return MarcParser::STR;
	YY_BREAK
case 40:
YY_RULE_SETUP
return MarcParser::VAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
return MarcParser::LEN;
	YY_BREAK
case 42:
YY_RULE_SETUP
return MarcParser::STO;
	YY_BREAK
case 43:
YY_RULE_SETUP
return MarcParser::MEM;
	YY_BREAK
case 44:
YY_RULE_SETUP
return MarcParser::EXC;
	YY_BREAK
case 45:
YY_RULE_SETUP
return MarcParser::CLR;
	YY_BREAK
case 46:
YY_RULE_SETUP
return MarcParser::FROM;
	YY_BREAK
case 47:
YY_RULE_SETUP
return MarcParser::TO;
	YY_BREAK
case 48:
YY_RULE_SETUP
return MarcParser::BETWEEN;
	YY_BREAK
case 49:
YY_RULE_SETUP
return MarcParser::_STRICT;
	YY_BREAK
case 50:
YY_RULE_SETUP
return MarcParser::_DELETE;
	YY_BREAK
case 51:
YY_RULE_SETUP
return MarcParser::REPLACE;
	YY_BREAK
case 52:
YY_RULE_SETUP
return MarcParser::REPLACEOCC;
	YY_BREAK
case 53:
YY_RULE_SETUP
return MarcParser::AT;
	YY_BREAK
case 54:
YY_RULE_SETUP
return MarcParser::BY;
	YY_BREAK
case 55:
YY_RULE_SETUP
return MarcParser::BEGINNING;
	YY_BREAK
case 56:
YY_RULE_SETUP
return MarcParser::END;
	YY_BREAK
case 57:
YY_RULE_SETUP
return MarcParser::BOTH;
	YY_BREAK
case 58:
YY_RULE_SETUP
return MarcParser::BFIRST;
	YY_BREAK
case 59:
YY_RULE_SETUP
return MarcParser::EFIRST;
	YY_BREAK
case 60:
YY_RULE_SETUP
return MarcParser::BLAST;
	YY_BREAK
case 61:
YY_RULE_SETUP
return MarcParser::ELAST;
	YY_BREAK
case 62:
YY_RULE_SETUP
return MarcParser::WNUMBER;
	YY_BREAK
case 63:
YY_RULE_SETUP
return MarcParser::WSTRING;
	YY_BREAK
case 64:
YY_RULE_SETUP
return MarcParser::EXISTS;
	YY_BREAK
case 65:
YY_RULE_SETUP
return MarcParser::EXISTSIN;
	YY_BREAK
case 66:
YY_RULE_SETUP
return MarcParser::PRECEDES;
	YY_BREAK
case 67:
YY_RULE_SETUP
return MarcParser::FOLLOWS;
	YY_BREAK
case 68:
YY_RULE_SETUP
return MarcParser::REDO;
	YY_BREAK
case 69:
YY_RULE_SETUP
return MarcParser::SORT;
	YY_BREAK
case 70:
YY_RULE_SETUP
return MarcParser::NEXT;
	YY_BREAK
case 71:
YY_RULE_SETUP
return MarcParser::LAST;
	YY_BREAK
case 72:
YY_RULE_SETUP
return MarcParser::TABLE;
	YY_BREAK
case 73:
YY_RULE_SETUP
return MarcParser::UPPER;
	YY_BREAK
case 74:
YY_RULE_SETUP
return MarcParser::LOWER;
	YY_BREAK
case 75:
YY_RULE_SETUP
return MarcParser::YEAR;
	YY_BREAK
case 76:
YY_RULE_SETUP
return MarcParser::MONTH;
	YY_BREAK
case 77:
YY_RULE_SETUP
return MarcParser::DAY;
	YY_BREAK
case 78:
YY_RULE_SETUP
return MarcParser::HOUR;
	YY_BREAK
case 79:
YY_RULE_SETUP
return MarcParser::MINUTE;
	YY_BREAK
case 80:
YY_RULE_SETUP
return MarcParser::SECOND;
	YY_BREAK
case 81:
YY_RULE_SETUP
return MarcParser::ORDINAL;
	YY_BREAK
case 82:
YY_RULE_SETUP
return MarcParser::NEXTSUB;
	YY_BREAK
case 83:
YY_RULE_SETUP
return MarcParser::NEXTSUBIN;
	YY_BREAK
case 84:
YY_RULE_SETUP
return MarcParser::PREVIOUSSUB;
	YY_BREAK
case 85:
YY_RULE_SETUP
return MarcParser::PREVIOUSSUBIN;
	YY_BREAK
case 86:
YY_RULE_SETUP
return MarcParser::REGFIND;
	YY_BREAK
case 87:
YY_RULE_SETUP
return MarcParser::REGFIND;
	YY_BREAK
case 88:
YY_RULE_SETUP
return MarcParser::REGFINDNUM;
	YY_BREAK
case 89:
YY_RULE_SETUP
return MarcParser::REGFINDPOS;
	YY_BREAK
case 90:
YY_RULE_SETUP
return MarcParser::REGMATCH;
	YY_BREAK
case 91:
YY_RULE_SETUP
return MarcParser::REGREPLACE;
	YY_BREAK
case 92:
YY_RULE_SETUP
return MarcParser::REGREPLACETABLE;
	YY_BREAK
case 93:
YY_RULE_SETUP
return MarcParser::INTABLE;
	YY_BREAK
case 94:
YY_RULE_SETUP
return MarcParser::MOVEBEFORE;
	YY_BREAK
case 95:
YY_RULE_SETUP
return MarcParser::MOVEAFTER;
	YY_BREAK
case 96:
YY_RULE_SETUP
;
	YY_BREAK
case 97:
YY_RULE_SETUP
lex_error = true;
	YY_BREAK
case 98:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete []yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 379 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 379 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 378);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


