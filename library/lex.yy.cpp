/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <fstream>
using std::istream;
using std::ostream;
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 89
#define YY_END_OF_BUFFER 90
static yyconst short int yy_acclist[261] =
    {   0,
       87,   87,   90,   88,   89,   87,   88,   89,   87,   89,
       88,   89,   10,   88,   89,   88,   89,   88,   89,   88,
       89,   11,   88,   89,   16,   88,   89,   14,   88,   89,
       15,   88,   89,   88,   89,   13,   88,   89,   17,   88,
       89,   12,   88,   89,   39,   88,   89,   34,   88,   89,
       38,   88,   89,   88,   89,   88,   89,   88,   89,   88,
       89,   19,   88,   89,   88,   89,   88,   89,   88,   89,
       88,   89,   88,   89,   88,   89,   88,   89,   25,   88,
       89,   88,   89,   88,   89,   88,   89,   18,   88,   89,
       88,   89,   88,   89,   88,   89,   88,   89,   88,   89,

       88,   89,   88,   89,   88,   89,   88,   89,   88,   89,
       88,   89,   88,   89,   88,   89,   88,   89,   25,   88,
       89,   88,   89,   88,   89,   88,   89,   88,   89,   88,
       89,   88,   89,   88,   89,   88,   89,   25,   88,   89,
       87,   33,    8,    2,   13,   37,   36,   54,   55,    6,
        7,   35,   27,   35,   24,   23,   22,   24,   23,   22,
       22,   23,   24,   31,   48,    6,    7,   24,   27,   35,
       24,   48,   31,   22,   54,   22,   23,   24,   35,    1,
        9,   13,16387,16387,   30,   46,   77,   45,   42,   44,
       26,16387,   26,   21,16387,   21,   20,16387,   20,   32,

       20,   21,   20,   21,   26,   43,   40,   41,   30,   20,
       43,    5,16387, 8195,   13,    4,   29,   47,   78,   71,
       70,   68,   69,   28,   75, 8195, 8195,   61,   62,   74,
       76,   72,   73,   61,   62,   59,   51,   60,   57,   65,
       79,   63,   80,   50,   64,   59,   60,   49,   67,   82,
       81,   84,   52,   66,   85,   56,   58,   86,   53,   83
    } ;

static yyconst short int yy_accept[341] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   13,   16,   18,
       20,   22,   25,   28,   31,   34,   36,   39,   42,   45,
       48,   51,   54,   56,   58,   60,   62,   65,   67,   69,
       71,   73,   75,   77,   79,   82,   84,   86,   88,   91,
       93,   95,   97,   99,  101,  103,  105,  107,  109,  111,
      113,  115,  117,  119,  122,  124,  126,  128,  130,  132,
      134,  136,  138,  141,  142,  143,  144,  144,  144,  145,
      145,  146,  146,  147,  148,  148,  148,  149,  149,  149,
      149,  149,  149,  149,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  151,

      152,  153,  154,  155,  155,  155,  155,  155,  155,  155,
      155,  156,  157,  158,  158,  159,  160,  161,  161,  164,
      165,  165,  165,  165,  165,  165,  165,  165,  166,  166,
      166,  166,  166,  167,  168,  168,  169,  169,  169,  169,
      169,  170,  170,  171,  173,  174,  176,  180,  180,  181,
      181,  182,  184,  185,  185,  186,  186,  186,  186,  186,
      186,  187,  188,  188,  188,  188,  188,  188,  189,  189,
      189,  189,  189,  189,  190,  190,  191,  191,  191,  193,
      194,  196,  197,  199,  200,  200,  201,  201,  203,  206,
      206,  206,  206,  206,  206,  206,  206,  207,  208,  208,

      208,  208,  209,  209,  209,  209,  209,  210,  210,  212,
      214,  214,  215,  216,  216,  216,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  218,  218,  218,  218,  219,
      220,  221,  221,  221,  221,  222,  222,  222,  222,  222,
      223,  223,  223,  223,  223,  223,  223,  224,  224,  224,
      225,  225,  226,  226,  226,  227,  228,  228,  229,  229,
      229,  229,  229,  229,  230,  230,  230,  230,  231,  231,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  233,  234,  234,  236,  237,  237,  237,
      237,  238,  239,  240,  241,  241,  242,  242,  243,  243,

      243,  243,  243,  243,  243,  243,  244,  245,  246,  248,
      248,  249,  249,  250,  251,  252,  252,  252,  253,  253,
      253,  254,  254,  254,  255,  255,  256,  256,  256,  257,
      257,  257,  257,  257,  258,  258,  259,  260,  261,  261
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    7,    1,    8,    9,
       10,   11,   12,   10,   13,    1,   14,   15,   16,   17,
       15,   15,   15,   15,   15,   15,   15,   18,   19,   20,
       21,   22,    1,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   30,   30,   33,   34,   35,   36,   37,
       30,   38,   39,   40,   41,   42,   43,   30,   44,   30,
        1,    1,    1,    1,    1,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   54,   54,   55,   56,   57,
       58,   59,   54,   60,   61,   62,   63,   64,   65,   66,
       67,   54,   10,   68,   10,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[69] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    2,    2,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    1
    } ;

static yyconst short int yy_base[350] =
    {   0,
        0,    0,  554,  555,   67,   69,  532,  555,    0,    0,
      544,  555,  555,  555,  555,   58,   61,  555,  555,  530,
      555,  529,    0,   22,   52,  494,   37,   58,   30,    0,
      490,   77,   47,   46,   89,  487,  486,  496,   60,   78,
      485,  498,  493,   41,  104,  486,   86,  110,   56,  482,
      139,  119,   91,  130,  479,  478,  488,  124,  142,  477,
      490,  485,  180,  139,  555,  555,    0,  525,  555,  188,
      168,    0,  555,  555,    0,  484,  555,  478,  485,   38,
      476,  483,  464,  555,  161,  466,  458,  469,  470,  477,
      468,   87,  472,  128,  165,  464,  460,  454,    0,    0,

        0,  555,  555,  455,  458,  449,  457,  455,  454,  156,
        0,  154,  159,  185,  448,  187,  198,  453,  216,  460,
      458,  206,  459,  445,  103,  458,  454,  555,  443,  446,
      455,  454,  555,  555,  193,  555,  445,  452,  216,  242,
      443,  215,  447,  254,  215,  234,  260,    0,  555,  252,
      555,  306,  318,    0,  555,  434,  432,  439,  426,  433,
      555,  555,  440,  428,  426,  437,  432,  555,  423,  428,
      426,  421,  418,  555,  430,  555,  415,  415,  320,  555,
      330,  555,  331,  555,  414,  555,  429,  555,  555,  421,
       33,  415,  319,  417,  413,  408,  555,  416,  413,  410,

      417,  555,  405,  404,  402,  332,  409,  222,  555,  340,
      380,  555,  326,  314,  339,  555,  400,  398,  402,  409,
      409,  394,  394,  392,  555,  396,  390,  393,  555,  555,
      555,  390,  387,  396,  337,  398,  389,  396,  391,  555,
      390,  397,  392,  315,  395,  382,  555,   64,  389,  555,
      377,  555,  375,  373,  555,  555,  372,  555,  376,  383,
      386,  381,  367,  555,  377,  366,  361,  555,  376,  555,
      361,  363,  377,  373,  362,  362,  356,  358,  369,  367,
      352,  362,  555,  555,  350,  555,  555,  351,  346,  342,
      555,  555,  555,  555,  340,  555,  345,  555,  334,  337,

      318,  330,  327,  312,  316,  555,  555,  555,  555,  294,
      555,  294,  555,  555,  555,  274,  272,  555,  254,  255,
      322,  244,  242,  555,  338,  555,  241,  239,  555,  219,
      215,  223,  202,  555,  198,  555,  555,  555,  555,  405,
      229,  408,  224,  209,  195,  178,  144,  104,   81
    } ;

static yyconst short int yy_def[350] =
    {   0,
      339,    1,  339,  339,  339,  339,  339,  339,  340,  341,
      342,  339,  339,  339,  339,  339,  343,  339,  339,  339,
      339,  339,  344,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  345,  342,  339,  339,
      346,  346,  339,  339,  347,  339,  339,  346,  346,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  346,  346,
      339,  339,  339,  339,  339,  339,  339,  339,  346,  346,

      346,  339,  339,  339,  339,  339,  339,  339,  339,  346,
      346,  346,  346,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  348,  339,  339,
      339,  339,  339,  349,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,    0,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339
    } ;

static yyconst short int yy_nxt[624] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   12,
       13,   14,   15,   16,   17,   17,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   30,   43,   44,   45,   46,   47,   48,   49,
        4,   50,   51,    4,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,    4,    4,   62,   63,   64,   64,
       64,   64,   70,   70,   70,   71,   71,   71,   76,  238,
       78,   87,  216,   77,   79,   88,   89,   96,  158,   97,
       90,  104,   99,  100,  107,  105,  239,   76,  108,  159,

       80,   81,   77,  109,  106,  210,   82,   91,  123,   83,
      281,  101,   92,   96,   93,   97,  110,  124,   84,   85,
      282,  125,  126,   94,  111,   95,  102,  112,  113,  127,
       87,  165,   81,  103,   88,  128,   82,  114,   91,  107,
       64,   64,  132,  108,  103,  154,  115,  166,  109,  116,
      117,  118,   80,   81,  133,  134,  119,  135,   82,   91,
      197,   83,  198,  104,   92,  136,   93,  105,  116,  117,
       84,   85,  123,  103,  168,   94,  106,   95,  114,  153,
      169,  124,  152,  152,  152,  125,  126,  115,  102,  181,
      116,  117,  118,  127,  183,  103,  148,  119,  179,  128,

      150,  151,   70,   70,   70,  157,  103,  135,  137,  165,
       75,  182,  138,  156,  103,  136,  184,  164,  116,  117,
      180,  182,  182,  180,  139,   72,  184,  180,  140,  141,
       67,  127,  108,  184,  142,  180,  143,  144,  129,  145,
      116,  146,  118,  338,  182,   94,   84,  147,  337,  180,
      185,  188,  180,  192,  182,  184,  193,  180,  180,  205,
      180,  199,  190,  191,  194,  184,  211,  211,  211,  184,
      202,  336,  171,  188,  161,  166,  173,  335,  221,  334,
      180,  230,  162,  189,  180,  333,  203,  332,  195,  192,
      330,  209,  206,  198,  329,  188,  163,  176,  174,  327,

      194,  184,  180,  159,  205,  326,  180,  185,  170,  180,
      178,  212,  204,  196,  212,  186,  208,  188,  175,  212,
      213,  213,  213,  212,  180,  212,  212,  189,  212,  255,
      256,  212,  325,  212,  324,  212,  212,  214,  212,  212,
      213,  213,  213,  212,  212,  212,  323,  241,  212,  214,
      322,  214,  242,  212,  255,  256,  243,  328,  215,  277,
      241,  214,  214,  278,  321,  242,  320,  276,  241,  243,
      215,  214,  215,  319,  242,  271,  331,  318,  243,  328,
      317,  241,  215,  215,  219,  316,  244,  242,  315,  328,
      314,  243,  215,  151,  211,  211,  211,  271,  331,  244,

      313,  312,  311,  310,  271,  331,   66,   66,   68,   68,
       68,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  280,  279,
      278,  277,  276,  275,  274,  273,  272,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  226,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  240,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  207,  204,  205,  204,  165,  203,

      202,  201,  200,  199,  196,  195,  191,  190,  187,  186,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  167,
      164,  165,  164,  163,  162,  161,  160,  157,  156,  157,
      156,  155,  149,  131,  130,  129,  122,  121,  120,   98,
       86,  131,  130,  129,  122,  121,  120,   98,   86,   74,
       73,   69,   65,  339,    3,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339
    } ;

static yyconst short int yy_chk[624] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        6,    6,   16,   16,   16,   17,   17,   17,   24,  191,
       25,   27,  349,   24,   25,   27,   28,   29,   80,   29,
       28,   33,   32,   32,   34,   33,  191,   44,   34,   80,

       25,   25,   44,   34,   33,  348,   25,   28,   39,   25,
      248,   32,   28,   49,   28,   49,   35,   39,   25,   25,
      248,   39,   40,   28,   35,   28,   32,   35,   35,   40,
       47,   92,   45,   32,   47,   40,   45,   35,   48,   53,
       64,   64,   48,   53,   32,  347,   35,   92,   53,   35,
       35,   35,   45,   45,   51,   51,   35,   54,   45,   48,
      125,   45,  125,   52,   48,   54,   48,   52,   54,   54,
       45,   45,   58,   51,   94,   48,   52,   48,   54,  346,
       94,   58,   71,   71,   71,   58,   59,   54,   51,  112,
       54,   54,   54,   59,  113,   51,  345,   54,  110,   59,

       70,   70,   70,   70,   70,   85,   51,   63,   63,   95,
      344,  112,   63,   85,   63,   63,  113,   95,   63,   63,
      110,  112,  116,  110,   63,  343,  113,  114,   63,   63,
      341,   63,   63,  117,   63,  135,   63,   63,   63,   63,
       63,   63,   63,  335,  116,   63,   63,   63,  333,  114,
      114,  119,  114,  122,  116,  117,  122,  135,  119,  142,
      135,  139,  145,  145,  122,  117,  150,  150,  150,  146,
      139,  332,  145,  119,  142,  142,  139,  331,  208,  330,
      119,  208,  139,  119,  140,  328,  140,  327,  140,  140,
      323,  146,  140,  146,  322,  147,  140,  140,  140,  320,

      140,  146,  147,  140,  147,  319,  140,  140,  144,  140,
      144,  152,  147,  144,  152,  144,  144,  147,  144,  152,
      152,  152,  152,  153,  147,  179,  153,  147,  179,  214,
      214,  153,  317,  179,  316,  181,  183,  152,  181,  183,
      213,  213,  213,  181,  183,  210,  312,  193,  210,  153,
      310,  179,  193,  210,  215,  215,  193,  321,  152,  244,
      206,  181,  183,  244,  305,  206,  304,  244,  193,  206,
      153,  210,  179,  303,  193,  235,  325,  302,  193,  321,
      301,  206,  181,  183,  206,  300,  193,  206,  299,  321,
      297,  206,  210,  211,  211,  211,  211,  235,  325,  206,

      295,  290,  289,  288,  235,  325,  340,  340,  342,  342,
      342,  285,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  269,  267,  266,  265,  263,  262,
      261,  260,  259,  257,  254,  253,  251,  249,  246,  245,
      243,  242,  241,  239,  238,  237,  236,  234,  233,  232,
      228,  227,  226,  224,  223,  222,  221,  220,  219,  218,
      217,  207,  205,  204,  203,  201,  200,  199,  198,  196,
      195,  194,  192,  190,  187,  185,  178,  177,  175,  173,
      172,  171,  170,  169,  167,  166,  165,  164,  163,  160,
      159,  158,  157,  156,  143,  141,  138,  137,  132,  131,

      130,  129,  127,  126,  124,  123,  121,  120,  118,  115,
      109,  108,  107,  106,  105,  104,   98,   97,   96,   93,
       91,   90,   89,   88,   87,   86,   83,   82,   81,   79,
       78,   76,   68,   62,   61,   60,   57,   56,   55,   50,
       46,   43,   42,   41,   38,   37,   36,   31,   26,   22,
       20,   11,    7,    3,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1

#include <string.h>
#include <stdlib.h>
#include <malloc.h>

#include "typedef.h"
#include "mempool.h"
#include "ytab.h"


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;



	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 340 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 555 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.initstr(yytext);
                  return MarcParser::STRING;
                }
	YY_BREAK
case 2:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str("");
                  return MarcParser::STRING;
                }
	YY_BREAK
case 3:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 4:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext+1);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 5:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return MarcParser::I1; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return MarcParser::I2; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::STAG;
                }
	YY_BREAK
case 9:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::FIX;
                }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return MarcParser::FIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
return *yytext;
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return MarcParser::SEP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->val=atoi(yytext);
                  return MarcParser::NUMERIC;
                }
	YY_BREAK
case 14:
YY_RULE_SETUP
return MarcParser::PLUS;
	YY_BREAK
case 15:
YY_RULE_SETUP
return MarcParser::MOINS;
	YY_BREAK
case 16:
YY_RULE_SETUP
return MarcParser::MULTIPLIE;
	YY_BREAK
case 17:
YY_RULE_SETUP
return MarcParser::DIVISE;
	YY_BREAK
case 18:
YY_RULE_SETUP
return MarcParser::VARS;
	YY_BREAK
case 19:
YY_RULE_SETUP
return MarcParser::VARD;
	YY_BREAK
case 20:
YY_RULE_SETUP
return MarcParser::VAR_NTO;
	YY_BREAK
case 21:
YY_RULE_SETUP
return MarcParser::VAR_NSO;
	YY_BREAK
case 22:
YY_RULE_SETUP
return MarcParser::VAR_NT;
	YY_BREAK
case 23:
YY_RULE_SETUP
return MarcParser::VAR_NS;
	YY_BREAK
case 24:
YY_RULE_SETUP
return MarcParser::VAR_NO;
	YY_BREAK
case 25:
YY_RULE_SETUP
return MarcParser::VAR_N;
	YY_BREAK
case 26:
YY_RULE_SETUP
return MarcParser::VAR_NEW;
	YY_BREAK
case 27:
YY_RULE_SETUP
return MarcParser::IF;
	YY_BREAK
case 28:
YY_RULE_SETUP
return MarcParser::THEN;
	YY_BREAK
case 29:
YY_RULE_SETUP
return MarcParser::ELSE;
	YY_BREAK
case 30:
YY_RULE_SETUP
return MarcParser::AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
return MarcParser::OR;
	YY_BREAK
case 32:
YY_RULE_SETUP
return MarcParser::NOT;
	YY_BREAK
case 33:
YY_RULE_SETUP
return MarcParser::NE;
	YY_BREAK
case 34:
YY_RULE_SETUP
return MarcParser::EQ;
	YY_BREAK
case 35:
YY_RULE_SETUP
return MarcParser::_IN;
	YY_BREAK
case 36:
YY_RULE_SETUP
return MarcParser::GE;
	YY_BREAK
case 37:
YY_RULE_SETUP
return MarcParser::LE;
	YY_BREAK
case 38:
YY_RULE_SETUP
return MarcParser::GT;
	YY_BREAK
case 39:
YY_RULE_SETUP
return MarcParser::LT;
	YY_BREAK
case 40:
YY_RULE_SETUP
return MarcParser::STR;
	YY_BREAK
case 41:
YY_RULE_SETUP
return MarcParser::VAL;
	YY_BREAK
case 42:
YY_RULE_SETUP
return MarcParser::LEN;
	YY_BREAK
case 43:
YY_RULE_SETUP
return MarcParser::STO;
	YY_BREAK
case 44:
YY_RULE_SETUP
return MarcParser::MEM;
	YY_BREAK
case 45:
YY_RULE_SETUP
return MarcParser::EXC;
	YY_BREAK
case 46:
YY_RULE_SETUP
return MarcParser::CLR;
	YY_BREAK
case 47:
YY_RULE_SETUP
return MarcParser::FROM;
	YY_BREAK
case 48:
YY_RULE_SETUP
return MarcParser::TO;
	YY_BREAK
case 49:
YY_RULE_SETUP
return MarcParser::BETWEEN;
	YY_BREAK
case 50:
YY_RULE_SETUP
return MarcParser::_STRICT;
	YY_BREAK
case 51:
YY_RULE_SETUP
return MarcParser::_DELETE;
	YY_BREAK
case 52:
YY_RULE_SETUP
return MarcParser::REPLACE;
	YY_BREAK
case 53:
YY_RULE_SETUP
return MarcParser::REPLACEOCC;
	YY_BREAK
case 54:
YY_RULE_SETUP
return MarcParser::AT;
	YY_BREAK
case 55:
YY_RULE_SETUP
return MarcParser::BY;
	YY_BREAK
case 56:
YY_RULE_SETUP
return MarcParser::BEGINNING;
	YY_BREAK
case 57:
YY_RULE_SETUP
return MarcParser::END;
	YY_BREAK
case 58:
YY_RULE_SETUP
return MarcParser::BOTH;
	YY_BREAK
case 59:
YY_RULE_SETUP
return MarcParser::BFIRST;
	YY_BREAK
case 60:
YY_RULE_SETUP
return MarcParser::EFIRST;
	YY_BREAK
case 61:
YY_RULE_SETUP
return MarcParser::BLAST;
	YY_BREAK
case 62:
YY_RULE_SETUP
return MarcParser::ELAST;
	YY_BREAK
case 63:
YY_RULE_SETUP
return MarcParser::WNUMBER;
	YY_BREAK
case 64:
YY_RULE_SETUP
return MarcParser::WSTRING;
	YY_BREAK
case 65:
YY_RULE_SETUP
return MarcParser::EXISTS;
	YY_BREAK
case 66:
YY_RULE_SETUP
return MarcParser::PRECEDES;
	YY_BREAK
case 67:
YY_RULE_SETUP
return MarcParser::FOLLOWS;
	YY_BREAK
case 68:
YY_RULE_SETUP
return MarcParser::REDO;
	YY_BREAK
case 69:
YY_RULE_SETUP
return MarcParser::SORT;
	YY_BREAK
case 70:
YY_RULE_SETUP
return MarcParser::NEXT;
	YY_BREAK
case 71:
YY_RULE_SETUP
return MarcParser::LAST;
	YY_BREAK
case 72:
YY_RULE_SETUP
return MarcParser::TABLE;
	YY_BREAK
case 73:
YY_RULE_SETUP
return MarcParser::UPPER;
	YY_BREAK
case 74:
YY_RULE_SETUP
return MarcParser::LOWER;
	YY_BREAK
case 75:
YY_RULE_SETUP
return MarcParser::YEAR;
	YY_BREAK
case 76:
YY_RULE_SETUP
return MarcParser::MONTH;
	YY_BREAK
case 77:
YY_RULE_SETUP
return MarcParser::DAY;
	YY_BREAK
case 78:
YY_RULE_SETUP
return MarcParser::HOUR;
	YY_BREAK
case 79:
YY_RULE_SETUP
return MarcParser::MINUTE;
	YY_BREAK
case 80:
YY_RULE_SETUP
return MarcParser::SECOND;
	YY_BREAK
case 81:
YY_RULE_SETUP
return MarcParser::ORDINAL;
	YY_BREAK
case 82:
YY_RULE_SETUP
return MarcParser::NEXTSUB;
	YY_BREAK
case 83:
YY_RULE_SETUP
return MarcParser::PREVIOUSSUB;
	YY_BREAK
case 84:
YY_RULE_SETUP
return MarcParser::REGFIND;
	YY_BREAK
case 85:
YY_RULE_SETUP
return MarcParser::REGMATCH;
	YY_BREAK
case 86:
YY_RULE_SETUP
return MarcParser::REGREPLACE;
	YY_BREAK
case 87:
YY_RULE_SETUP
;
	YY_BREAK
case 88:
YY_RULE_SETUP
lex_error = true;
	YY_BREAK
case 89:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete []yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 340 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 340 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 339);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


