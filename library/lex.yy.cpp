#ifndef YY_CHAR
#define YY_CHAR char
#endif
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: c:\\Program\040Files\\Development\\CVS\040Repository/flex++/flexskel.cc,v 1.1.1.1 2002/04/13 06:01:32 Bear Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
//#include <osfcn.h>
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#define INITIAL 0
#define YY_MarcScanner_FLEX_SCANNER
#include <string.h>
#include <stdlib.h>
#include <malloc.h>

#include "typedef.h"
#include "mempool.h"
#include "ytab.h"

/*
%p 1200
*/


#include "lex.yy.h"

#define yy___stderr YY_MarcScanner_ERRFILE
#define yy___text YY_MarcScanner_TEXT
#define yy___leng YY_MarcScanner_LENG
#define yy___in YY_MarcScanner_IN
#define yy___out YY_MarcScanner_OUT
#define yy___newfile \
	do \
		{ \
		YY_MarcScanner_INIT_BUFFER( YY_MarcScanner_CURRENT_BUFFER, yy___in ); \
		YY_MarcScanner_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_MarcScanner_DEBUG != 0
#define yy___flex_debug YY_MarcScanner_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_MarcScanner_ECHO
#define yy___input YY_MarcScanner_INPUT
#define yy___fatal_error YY_MarcScanner_FATAL_ERROR
#define yy___wrap YY_MarcScanner_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___leng = yy_cp - yy_bp; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_MarcScanner_IFILE  *yy_input_file;

    YY_MarcScanner_CHAR *yy_ch_buf;               /* input buffer */
    YY_MarcScanner_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_MarcScanner_DEBUG != 0
int YY_MarcScanner_DEBUG_FLAG=YY_MarcScanner_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_MarcScanner_CURRENT_BUFFER
static YY_BUFFER_STATE YY_MarcScanner_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_MarcScanner_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_MarcScanner_CHAR *yy___text;
int yy___leng;

YY_MarcScanner_IFILE  *yy___in = (YY_MarcScanner_IFILE  *) 0;
YY_MarcScanner_OFILE *yy___out = (YY_MarcScanner_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_MarcScanner_CHAR *yy_c_buf_p = (YY_MarcScanner_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_MarcScanner_CHAR c, YY_MarcScanner_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_MarcScanner_ECHO_NOCODE
void YY_MarcScanner_CLASS::yy___echo()
{YY_MarcScanner_ECHO_CODE
}
#endif
#ifndef YY_MarcScanner_INPUT_NOCODE
int  YY_MarcScanner_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_MarcScanner_INPUT_CODE
}
#endif
#ifndef YY_MarcScanner_FATAL_ERROR_NOCODE
void YY_MarcScanner_CLASS::yy___fatal_error(char *msg)
{YY_MarcScanner_FATAL_ERROR_CODE
}
#endif
#ifndef YY_MarcScanner_WRAP_NOCODE
int  YY_MarcScanner_CLASS::yy___wrap()
{YY_MarcScanner_WRAP_CODE
}
#endif
void YY_MarcScanner_CLASS::yy_initialize()
{
 yy_looking_for_trail_begin = 0;
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_MarcScanner_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_MarcScanner_DEBUG != 0
 YY_MarcScanner_DEBUG_FLAG=YY_MarcScanner_DEBUG_INIT;
#endif
}

YY_MarcScanner_CLASS::YY_MarcScanner_CLASS(YY_MarcScanner_CONSTRUCTOR_PARAM) YY_MarcScanner_CONSTRUCTOR_INIT
{yy_initialize();
 YY_MarcScanner_CONSTRUCTOR_CODE;
}
YY_MarcScanner_CLASS::~YY_MarcScanner_CLASS() 
{YY_MarcScanner_DESTRUCTOR_CODE;
 if(YY_MarcScanner_CURRENT_BUFFER)
  YY_MarcScanner_DELETE_BUFFER(YY_MarcScanner_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 88
static const short int yy_acclist[251] =
    {   0,
       85,   85,   88,   86,   87,   85,   86,   87,   85,   87,
       86,   87,    9,   86,   87,   86,   87,   86,   87,   10,
       86,   87,   15,   86,   87,   13,   86,   87,   14,   86,
       87,   86,   87,   12,   86,   87,   16,   86,   87,   11,
       86,   87,   37,   86,   87,   32,   86,   87,   36,   86,
       87,   86,   87,   86,   87,   86,   87,   86,   87,   18,
       86,   87,   86,   87,   86,   87,   86,   87,   86,   87,
       86,   87,   86,   87,   86,   87,   24,   86,   87,   86,
       87,   86,   87,   86,   87,   17,   86,   87,   86,   87,
       86,   87,   86,   87,   86,   87,   86,   87,   86,   87,

       86,   87,   86,   87,   86,   87,   86,   87,   86,   87,
       86,   87,   86,   87,   86,   87,   24,   86,   87,   86,
       87,   86,   87,   86,   87,   86,   87,   86,   87,   86,
       87,   86,   87,   86,   87,   24,   86,   87,   85,   31,
        7,    2,   12,   35,   34,   52,   53,    5,    6,   33,
       25,   33,   23,   22,   21,   23,   22,   21,   21,   22,
       23,   29,   46,    5,    6,   23,   25,   33,   23,   46,
       29,   21,   52,   21,   22,   23,   33,    1,    8,   12,
    16387,16387,   28,   44,   75,   43,   40,   42,   20,16387,
       20,   19,16387,   19,   30,   19,   20,   41,   38,   39,

       28,   19,   41, 8195,   12,    4,   27,   45,   76,   69,
       68,   66,   67,   26,   73, 8195, 8195,   59,   60,   72,
       74,   70,   71,   59,   60,   57,   49,   58,   55,   63,
       77,   61,   78,   48,   62,   57,   58,   47,   65,   80,
       79,   82,   50,   64,   83,   54,   56,   84,   51,   81
    } ;

static const short int yy_accept[332] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   13,   16,   18,
       20,   23,   26,   29,   32,   34,   37,   40,   43,   46,
       49,   52,   54,   56,   58,   60,   63,   65,   67,   69,
       71,   73,   75,   77,   80,   82,   84,   86,   89,   91,
       93,   95,   97,   99,  101,  103,  105,  107,  109,  111,
      113,  115,  117,  120,  122,  124,  126,  128,  130,  132,
      134,  136,  139,  140,  141,  142,  142,  143,  143,  144,
      144,  145,  146,  146,  146,  147,  147,  147,  147,  147,
      147,  147,  148,  148,  148,  148,  148,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  149,  150,  151,

      152,  153,  153,  153,  153,  153,  153,  153,  154,  155,
      156,  156,  157,  158,  159,  159,  162,  163,  163,  163,
      163,  163,  163,  163,  163,  164,  164,  164,  164,  164,
      165,  166,  167,  167,  167,  167,  167,  168,  168,  169,
      171,  172,  174,  178,  179,  179,  180,  182,  183,  183,
      184,  184,  184,  184,  184,  184,  185,  186,  186,  186,
      186,  186,  186,  187,  187,  187,  187,  187,  187,  188,
      188,  189,  189,  189,  191,  192,  194,  195,  195,  196,
      196,  198,  198,  198,  198,  198,  198,  198,  198,  199,
      200,  200,  200,  200,  201,  201,  201,  201,  201,  202,

      202,  204,  204,  205,  206,  206,  206,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  208,  208,  208,  208,
      209,  210,  211,  211,  211,  211,  212,  212,  212,  212,
      212,  213,  213,  213,  213,  213,  213,  213,  214,  214,
      214,  215,  215,  216,  216,  216,  217,  218,  218,  219,
      219,  219,  219,  219,  219,  220,  220,  220,  220,  221,
      221,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  223,  224,  224,  226,  227,  227,
      227,  227,  228,  229,  230,  231,  231,  232,  232,  233,
      233,  233,  233,  233,  233,  233,  233,  234,  235,  236,

      238,  238,  239,  239,  240,  241,  242,  242,  242,  243,
      243,  243,  244,  244,  244,  245,  245,  246,  246,  246,
      247,  247,  247,  247,  247,  248,  248,  249,  250,  251,
      251
    } ;

static const YY_CHAR yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    5,    6,    1,    1,    7,    8,
        9,   10,   11,    9,   12,    1,   13,   14,   15,   16,
       14,   14,   14,   14,   14,   14,   14,   17,   18,   19,
       20,   21,    1,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   29,   29,   32,   33,   34,   35,   36,
       29,   37,   38,   39,   40,   41,   29,   29,   42,   29,
        1,    1,    1,    1,    1,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   52,   53,   54,   55,
       56,   57,   52,   58,   59,   60,   61,   62,   63,   64,
       65,   52,    9,   66,    9,    1,    1
    } ;

static const YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1
    } ;

static const short int yy_base[338] =
    {   0,
        0,    0,  520,  521,   65,   67,  499,  521,    0,  511,
      521,  521,  521,  521,   57,   60,  521,  521,  497,  521,
      496,    0,   22,   51,  462,   37,   57,   30,    0,  458,
       77,   44,   50,   80,  455,  454,  464,   34,   52,  453,
      466,  461,   54,  101,  454,   77,  110,   70,  450,  135,
       88,  105,  133,  447,  446,  456,  117,  132,  445,  458,
      453,  174,  157,  521,  521,  492,  521,  229,  170,    0,
      521,  521,    0,  452,  521,  446,  453,   85,  444,  451,
      432,  521,   79,  434,  426,  437,  438,  445,  436,   94,
      440,  136,  104,  432,  428,  422,    0,    0,    0,  521,

      521,  423,  426,  417,  425,  423,  422,    0,  144,  160,
      412,  415,  162,  180,  420,  202,  427,  425,  202,  426,
      412,  140,  425,  421,  521,  410,  413,  422,  421,  521,
      521,  521,  412,  419,  208,  231,  410,  161,  414,  202,
      223,  231,  247,  521,  278,  521,  293,  304,    0,  521,
      401,  399,  406,  393,  400,  521,  521,  407,  395,  393,
      404,  399,  521,  390,  395,  393,  388,  385,  521,  397,
      521,  382,  382,  308,  521,  312,  521,  381,  521,  396,
      521,  388,   51,  382,  294,  384,  380,  375,  521,  383,
      380,  377,  384,  521,  372,  371,  369,  313,  376,  156,

      521,  359,  521,  314,  234,  238,  521,  367,  365,  369,
      376,  376,  361,  361,  359,  521,  363,  357,  360,  521,
      521,  521,  357,  354,  363,  245,  365,  356,  363,  358,
      521,  357,  364,  359,  272,  362,  349,  521,  226,  356,
      521,  344,  521,  342,  340,  521,  521,  339,  521,  343,
      350,  353,  348,  334,  521,  344,  333,  328,  521,  343,
      521,  328,  330,  344,  340,  329,  323,  317,  319,  325,
      323,  308,  317,  521,  521,  302,  521,  521,  306,  301,
      296,  521,  521,  521,  521,  294,  521,  307,  521,  296,
      300,  284,  294,  293,  281,  286,  521,  521,  521,  521,

      277,  521,  251,  521,  521,  521,  241,  237,  521,  228,
      232,  270,  223,  217,  521,  299,  521,  211,  202,  521,
      164,  146,  158,  158,  521,  147,  521,  521,  521,  521,
      378,  381,  176,  168,  160,  101,   76
    } ;

static const short int yy_def[338] =
    {   0,
      330,    1,  330,  330,  330,  330,  330,  330,  331,  332,
      330,  330,  330,  330,  330,  333,  330,  330,  330,  330,
      330,  334,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
      333,  333,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  332,  330,  330,  335,  335,
      330,  330,  336,  330,  330,  335,  335,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  335,  335,  330,  330,
      330,  330,  330,  330,  330,  330,  335,  335,  335,  330,

      330,  330,  330,  330,  330,  330,  330,  335,  335,  335,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  337,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,

      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,    0,
      330,  330,  330,  330,  330,  330,  330
    } ;

static const short int yy_nxt[588] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   11,   12,
       13,   14,   15,   16,   16,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,    4,   49,
       50,    4,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,    4,    4,   61,   62,   63,   63,   63,   63,
       68,   68,   68,   69,   69,   69,   74,  207,   76,   85,
      120,   75,   77,   86,   87,   94,  102,   95,   88,  121,
      103,   97,   98,  122,  123,  229,  105,   78,   79,  104,

      106,  124,  149,   80,   89,  107,   81,  125,   74,   90,
       99,   91,  230,   75,  108,   82,   83,  109,  110,   85,
       92,  152,   93,   86,  100,   94,  111,   95,   79,  151,
      102,  101,   80,  153,  103,  112,  160,   89,  113,  114,
      115,  129,  101,  104,  154,  116,  160,   78,   79,  130,
      131,  105,  161,   80,  159,  106,   81,   89,   63,   63,
      107,  148,   90,  120,   91,   82,   83,  132,  101,   73,
      113,  114,  121,   92,  123,   93,  122,   70,  174,  111,
      163,  124,  100,  147,  147,  147,  164,  125,  112,  101,
      329,  113,  114,  115,  176,  189,  175,  190,  116,  175,

      101,  133,  328,  197,  327,  134,  326,  101,  132,  175,
      212,  113,  114,  221,  177,  177,  135,  175,  156,  161,
      136,  137,  325,  124,  106,  177,  138,  175,  139,  140,
      126,  141,  113,  142,  115,  177,  181,   92,   82,  143,
      145,  146,   68,   68,   68,  177,  324,  184,  246,  247,
      185,  191,  246,  247,  165,  323,  173,  181,  186,  188,
      194,  179,  200,  321,  170,  177,  168,  181,  182,  183,
      272,  320,  157,  195,  318,  187,  184,  317,  166,  198,
      273,  181,  262,  158,  171,  169,  201,  186,  190,  197,
      154,  202,  202,  202,  178,  316,  177,  196,  203,  315,

      203,  314,  181,  262,  319,  203,  204,  204,  204,  203,
      262,  203,  181,  203,  268,  203,  203,  203,  269,  203,
      203,  232,  267,  205,  203,  319,  233,  204,  204,  204,
      234,  313,  312,  311,  205,  319,  322,  310,  205,  309,
      232,  232,  205,  206,  308,  233,  307,  233,  306,  234,
      305,  234,  304,  303,  206,  302,  301,  322,  206,  235,
      232,  300,  206,  210,  322,  299,  233,  298,  297,  296,
      234,  146,  202,  202,  202,  295,  294,  293,  235,   65,
       65,   66,   66,   66,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,

      276,  275,  274,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  217,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  231,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  199,
      196,  197,  196,  160,  195,  194,  193,  192,  191,  188,
      187,  183,  182,  180,  179,  178,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  162,  159,  160,  159,  158,
      157,  156,  155,  152,  151,  152,  151,  150,  144,  128,

      127,  126,  119,  118,  117,   96,   84,  128,  127,  126,
      119,  118,  117,   96,   84,   72,   71,   67,   64,  330,
        3,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330
    } ;

static const short int yy_chk[588] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    6,    6,
       15,   15,   15,   16,   16,   16,   23,  337,   24,   26,
       38,   23,   24,   26,   27,   28,   32,   28,   27,   38,
       32,   31,   31,   38,   39,  183,   33,   24,   24,   32,

       33,   39,  336,   24,   27,   33,   24,   39,   43,   27,
       31,   27,  183,   43,   34,   24,   24,   34,   34,   46,
       27,   83,   27,   46,   31,   48,   34,   48,   44,   83,
       51,   31,   44,   78,   51,   34,   90,   47,   34,   34,
       34,   47,   31,   51,   78,   34,   93,   44,   44,   50,
       50,   52,   90,   44,   93,   52,   44,   47,   63,   63,
       52,  335,   47,   57,   47,   44,   44,   53,   50,  334,
       53,   53,   57,   47,   58,   47,   57,  333,  109,   53,
       92,   58,   50,   69,   69,   69,   92,   58,   53,   50,
      326,   53,   53,   53,  110,  122,  113,  122,   53,  109,

       50,   62,  324,  138,  323,   62,  322,   62,   62,  109,
      200,   62,   62,  200,  114,  110,   62,  113,  138,  138,
       62,   62,  321,   62,   62,  110,   62,  113,   62,   62,
       62,   62,   62,   62,   62,  114,  116,   62,   62,   62,
       68,   68,   68,   68,   68,  114,  319,  119,  205,  205,
      119,  135,  206,  206,  140,  318,  140,  116,  119,  140,
      135,  140,  140,  314,  140,  142,  135,  116,  141,  141,
      239,  313,  135,  136,  311,  136,  136,  310,  141,  136,
      239,  143,  226,  136,  136,  136,  142,  136,  142,  143,
      136,  145,  145,  145,  136,  308,  142,  143,  147,  307,

      147,  303,  143,  226,  312,  147,  147,  147,  147,  148,
      226,  148,  143,  174,  235,  174,  148,  176,  235,  176,
      174,  185,  235,  147,  176,  312,  185,  204,  204,  204,
      185,  301,  296,  295,  148,  312,  316,  294,  174,  293,
      198,  185,  176,  147,  292,  198,  291,  185,  290,  198,
      288,  185,  286,  281,  148,  280,  279,  316,  174,  185,
      198,  276,  176,  198,  316,  273,  198,  272,  271,  270,
      198,  202,  202,  202,  202,  269,  268,  267,  198,  331,
      331,  332,  332,  332,  266,  265,  264,  263,  262,  260,
      258,  257,  256,  254,  253,  252,  251,  250,  248,  245,

      244,  242,  240,  237,  236,  234,  233,  232,  230,  229,
      228,  227,  225,  224,  223,  219,  218,  217,  215,  214,
      213,  212,  211,  210,  209,  208,  199,  197,  196,  195,
      193,  192,  191,  190,  188,  187,  186,  184,  182,  180,
      178,  173,  172,  170,  168,  167,  166,  165,  164,  162,
      161,  160,  159,  158,  155,  154,  153,  152,  151,  139,
      137,  134,  133,  129,  128,  127,  126,  124,  123,  121,
      120,  118,  117,  115,  112,  111,  107,  106,  105,  104,
      103,  102,   96,   95,   94,   91,   89,   88,   87,   86,
       85,   84,   81,   80,   79,   77,   76,   74,   66,   61,

       60,   59,   56,   55,   54,   49,   45,   42,   41,   40,
       37,   36,   35,   30,   25,   21,   19,   10,    7,    3,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      330,  330,  330,  330,  330,  330,  330
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_MarcScanner_DEBUG != 0
static const short int yy_rule_linenum[87] =
    {   0,
       41,   46,   51,   56,   61,   62,   63,   68,   73,   74,
       75,   76,   81,   82,   83,   84,   85,   86,   87,   88,
       89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
       99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
      109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
      119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
      129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
      139,  140,  141,  142,  143,  144,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154
    } ;

#endif
//static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
//static YY_CHAR *yy_full_match;
//static int yy_lp;
//static int yy_looking_for_trail_begin = 0;
//static int yy_full_lp;
//static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_MarcScanner_LEX_DEFINED
YY_MarcScanner_LEX_RETURN YY_MarcScanner_LEX ( YY_MarcScanner_LEX_PARAM )
YY_MarcScanner_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_MarcScanner_LEX_RETURN YY_MarcScanner_CLASS::YY_MarcScanner_LEX ( YY_MarcScanner_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_MarcScanner_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 

/* % end of prolog */ 

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_MarcScanner_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_MarcScanner_OFILE_DEFAULT;

	if ( YY_MarcScanner_CURRENT_BUFFER )
	    YY_MarcScanner_INIT_BUFFER( YY_MarcScanner_CURRENT_BUFFER, yy___in );
	else
	    YY_MarcScanner_CURRENT_BUFFER = YY_MarcScanner_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_MarcScanner_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 331 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_current_state != 330 );

yy_find_action:
/* % code to find the action number goes here */ 
	yy_current_state = *--yy_state_ptr;
	yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	for ( ; ; ) /* until we find what rule we matched */
	    {
	    if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		{
		yy_act = yy_acclist[yy_lp];
		if ( yy_act & YY_TRAILING_HEAD_MASK ||
		     yy_looking_for_trail_begin )
		    {
		    if ( yy_act == yy_looking_for_trail_begin )
			{
			yy_looking_for_trail_begin = 0;
			yy_act &= ~YY_TRAILING_HEAD_MASK;
			break;
			}
		    }
		else if ( yy_act & YY_TRAILING_MASK )
		    {
		    yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
		    yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
		    }
		else
		    {
		    yy_full_match = yy_cp;
		    yy_full_state = yy_state_ptr;
		    yy_full_lp = yy_lp;
		    break;
		    }
		++yy_lp;
		goto find_rule;
		}
	    --yy_cp;
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
	    }

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_MarcScanner_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_MarcScanner_IOSTREAM
			fprintf( yy___stderr , "--scanner backtracking\n" );
#else
			yy___stderr <<"--scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_MarcScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_MarcScanner_IOSTREAM
			fprintf( yy___stderr , 
			 "--accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_MarcScanner_IOSTREAM
			fprintf( yy___stderr , "--(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_MarcScanner_IOSTREAM
			fprintf( yy___stderr , "--EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
case 1:
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.initstr(yytext);
                  return MarcParser::STRING;
                }
	YY_BREAK
case 2:
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str("");
                  return MarcParser::STRING;
                }
	YY_BREAK
case 3:
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 4:
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext+1);
                  return MarcParser::TAG;
                }
	YY_BREAK
case 5:
{ return MarcParser::I1; }
	YY_BREAK
case 6:
{ return MarcParser::I2; }
	YY_BREAK
case 7:
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::STAG;
                }
	YY_BREAK
case 8:
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->str.str(yytext);
                  return MarcParser::FIX;
                }
	YY_BREAK
case 9:
{ return MarcParser::FIN; }
	YY_BREAK
case 10:
return *yytext;
	YY_BREAK
case 11:
{ return MarcParser::SEP; }
	YY_BREAK
case 12:
{
                  yylval.inst=((MemoryPool *) allocator)->AllocTypeInst();
                  yylval.inst->val=atoi(yytext);
                  return MarcParser::NUMERIC;
                }
	YY_BREAK
case 13:
return MarcParser::PLUS;
	YY_BREAK
case 14:
return MarcParser::MOINS;
	YY_BREAK
case 15:
return MarcParser::MULTIPLIE;
	YY_BREAK
case 16:
return MarcParser::DIVISE;
	YY_BREAK
case 17:
return MarcParser::VARS;
	YY_BREAK
case 18:
return MarcParser::VARD;
	YY_BREAK
case 19:
return MarcParser::VAR_NTO;
	YY_BREAK
case 20:
return MarcParser::VAR_NSO;
	YY_BREAK
case 21:
return MarcParser::VAR_NT;
	YY_BREAK
case 22:
return MarcParser::VAR_NS;
	YY_BREAK
case 23:
return MarcParser::VAR_NO;
	YY_BREAK
case 24:
return MarcParser::VAR_N;
	YY_BREAK
case 25:
return MarcParser::IF;
	YY_BREAK
case 26:
return MarcParser::THEN;
	YY_BREAK
case 27:
return MarcParser::ELSE;
	YY_BREAK
case 28:
return MarcParser::AND;
	YY_BREAK
case 29:
return MarcParser::OR;
	YY_BREAK
case 30:
return MarcParser::NOT;
	YY_BREAK
case 31:
return MarcParser::NE;
	YY_BREAK
case 32:
return MarcParser::EQ;
	YY_BREAK
case 33:
return MarcParser::_IN;
	YY_BREAK
case 34:
return MarcParser::GE;
	YY_BREAK
case 35:
return MarcParser::LE;
	YY_BREAK
case 36:
return MarcParser::GT;
	YY_BREAK
case 37:
return MarcParser::LT;
	YY_BREAK
case 38:
return MarcParser::STR;
	YY_BREAK
case 39:
return MarcParser::VAL;
	YY_BREAK
case 40:
return MarcParser::LEN;
	YY_BREAK
case 41:
return MarcParser::STO;
	YY_BREAK
case 42:
return MarcParser::MEM;
	YY_BREAK
case 43:
return MarcParser::EXC;
	YY_BREAK
case 44:
return MarcParser::CLR;
	YY_BREAK
case 45:
return MarcParser::FROM;
	YY_BREAK
case 46:
return MarcParser::TO;
	YY_BREAK
case 47:
return MarcParser::BETWEEN;
	YY_BREAK
case 48:
return MarcParser::_STRICT;
	YY_BREAK
case 49:
return MarcParser::_DELETE;
	YY_BREAK
case 50:
return MarcParser::REPLACE;
	YY_BREAK
case 51:
return MarcParser::REPLACEOCC;
	YY_BREAK
case 52:
return MarcParser::AT;
	YY_BREAK
case 53:
return MarcParser::BY;
	YY_BREAK
case 54:
return MarcParser::BEGINING;
	YY_BREAK
case 55:
return MarcParser::END;
	YY_BREAK
case 56:
return MarcParser::BOTH;
	YY_BREAK
case 57:
return MarcParser::BFIRST;
	YY_BREAK
case 58:
return MarcParser::EFIRST;
	YY_BREAK
case 59:
return MarcParser::BLAST;
	YY_BREAK
case 60:
return MarcParser::ELAST;
	YY_BREAK
case 61:
return MarcParser::WNUMBER;
	YY_BREAK
case 62:
return MarcParser::WSTRING;
	YY_BREAK
case 63:
return MarcParser::EXISTS;
	YY_BREAK
case 64:
return MarcParser::PRECEDES;
	YY_BREAK
case 65:
return MarcParser::FOLLOWS;
	YY_BREAK
case 66:
return MarcParser::REDO;
	YY_BREAK
case 67:
return MarcParser::SORT;
	YY_BREAK
case 68:
return MarcParser::NEXT;
	YY_BREAK
case 69:
return MarcParser::LAST;
	YY_BREAK
case 70:
return MarcParser::TABLE;
	YY_BREAK
case 71:
return MarcParser::UPPER;
	YY_BREAK
case 72:
return MarcParser::LOWER;
	YY_BREAK
case 73:
return MarcParser::YEAR;
	YY_BREAK
case 74:
return MarcParser::MONTH;
	YY_BREAK
case 75:
return MarcParser::DAY;
	YY_BREAK
case 76:
return MarcParser::HOUR;
	YY_BREAK
case 77:
return MarcParser::MINUTE;
	YY_BREAK
case 78:
return MarcParser::SECOND;
	YY_BREAK
case 79:
return MarcParser::ORDINAL;
	YY_BREAK
case 80:
return MarcParser::NEXTBAL;
	YY_BREAK
case 81:
return MarcParser::PREVIOUSBAL;
	YY_BREAK
case 82:
return MarcParser::REGFIND;
	YY_BREAK
case 83:
return MarcParser::REGMATCH;
	YY_BREAK
case 84:
return MarcParser::REGREPLACE;
	YY_BREAK
case 85:
;
	YY_BREAK
case 86:
lex_error = true;
	YY_BREAK
case 87:
ECHO;
	YY_BREAK
	    case YY_STATE_EOF(INITIAL):
		yyterminate();

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_MarcScanner_DEBUG != 0
#ifndef YY_MarcScanner_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_MarcScanner_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_MarcScanner_CHAR *dest = YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf;
    register YY_MarcScanner_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_MarcScanner_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_MarcScanner_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_MarcScanner_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_MarcScanner_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_MarcScanner_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_MarcScanner_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    yy_current_state = yy_start;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 331 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_MarcScanner_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 331 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 330);

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_MarcScanner_CHAR c, register YY_MarcScanner_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_MarcScanner_CHAR c;
register YY_MarcScanner_CHAR *yy_bp;
#endif
#else
void YY_MarcScanner_CLASS::yyunput( YY_MarcScanner_CHAR c, YY_MarcScanner_CHAR *yy_bp )
#endif

    {
    register YY_MarcScanner_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_MarcScanner_CHAR *dest =
	    &YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[YY_MarcScanner_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_MarcScanner_CHAR *source =
	    &YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_MarcScanner_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_MarcScanner_CLASS::input()
#endif
    {
    int c;
    YY_MarcScanner_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_MarcScanner_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_MarcScanner_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_MarcScanner_RESTART( YY_MarcScanner_IFILE  *input_file )
#else
void YY_MarcScanner_RESTART( input_file )
YY_MarcScanner_IFILE  *input_file;
#endif
#else
void YY_MarcScanner_CLASS::YY_MarcScanner_RESTART ( YY_MarcScanner_IFILE  *input_file )
#endif

    {
    YY_MarcScanner_INIT_BUFFER( YY_MarcScanner_CURRENT_BUFFER, input_file );
    YY_MarcScanner_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_MarcScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_MarcScanner_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_MarcScanner_CLASS::YY_MarcScanner_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_MarcScanner_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_MarcScanner_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_MarcScanner_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_MarcScanner_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_MarcScanner_CURRENT_BUFFER = new_buffer;
    YY_MarcScanner_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_MarcScanner_LOAD_BUFFER_STATE( void )
#else
void YY_MarcScanner_LOAD_BUFFER_STATE()
#endif
#else
void YY_MarcScanner_CLASS::YY_MarcScanner_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_MarcScanner_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_MarcScanner_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_MarcScanner_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_MarcScanner_CREATE_BUFFER( YY_MarcScanner_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_MarcScanner_CREATE_BUFFER( file, size )
YY_MarcScanner_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_MarcScanner_CLASS::YY_MarcScanner_CREATE_BUFFER( YY_MarcScanner_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_MarcScanner_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_MarcScanner_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_MarcScanner_CREATE_BUFFER()" );

    YY_MarcScanner_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_MarcScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_MarcScanner_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_MarcScanner_CLASS::YY_MarcScanner_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_MarcScanner_CURRENT_BUFFER )
	YY_MarcScanner_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_MarcScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_MarcScanner_IFILE  *file )
#else
void YY_MarcScanner_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_MarcScanner_IFILE  *file;
#endif
#else
void YY_MarcScanner_CLASS::YY_MarcScanner_INIT_BUFFER( YY_BUFFER_STATE b, YY_MarcScanner_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }


