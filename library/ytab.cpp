/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#pragma warning( disable : 4102 )
#pragma warning( disable : 4065 )

#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <malloc.h>
#include <time.h>
#include "ytab.h"

/* Command to build:  ../bison+.pl --input analyse2.y --class MarcScanner --cpp ytab.cpp --hdr ytab.h --no-lines */











/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      98,    99,     2,     2,   100,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     7,    10,    13,    17,    21,    23,
      25,    27,    29,    31,    34,    37,    41,    43,    45,    48,
      50,    55,    57,    62,    64,    66,    69,    71,    75,    80,
      84,    88,    92,    95,    99,   103,   107,   111,   115,   119,
     123,   128,   135,   139,   143,   150,   154,   156,   158,   160,
     162,   164,   166,   168,   170,   175,   177,   182,   189,   196,
     205,   207,   212,   219,   226,   235,   237,   239,   241,   243,
     245,   247,   249,   251,   253,   255,   257,   261,   265,   269,
     273,   278,   283,   288,   293,   298,   303,   310,   315,   320,
     325,   330,   337,   342,   349,   356,   365,   370,   378,   386,
     394,   402,   409,   419,   429,   439,   449,   456,   466,   476,
     486,   496,   505,   517,   529,   541,   553,   562,   573,   578,
     583,   588,   593,   598,   603,   608,   613,   618,   623,   628,
     633,   638,   645,   652,   661,   666,   673,   680,   689,   694,
     699,   704,   711,   716,   723,   728,   735,   740,   747,   756,
     761,   768,   775,   784,   797,   812,   829,   838,   845,   858,
     873,   890,   895,   902,   913,   926,   941,   946,   953,   964,
     977
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int8 yyrhs[] =
{
     102,     0,    -1,   103,    -1,   104,    -1,     7,   104,    -1,
     105,     4,    -1,   105,     3,     4,    -1,   105,     3,   105,
      -1,   106,    -1,   110,    -1,   112,    -1,    72,    -1,   108,
      -1,   108,   109,    -1,   108,    50,    -1,   108,   109,    50,
      -1,   109,    -1,    50,    -1,   109,    50,    -1,    47,    -1,
      47,    98,   112,    99,    -1,    49,    -1,    49,    98,   112,
      99,    -1,    51,    -1,    52,    -1,    23,   111,    -1,    27,
      -1,    27,    98,    99,    -1,    27,    98,   112,    99,    -1,
      98,   111,    99,    -1,   111,    24,   111,    -1,   111,    25,
     111,    -1,    26,   111,    -1,   112,    11,   112,    -1,   112,
      12,   112,    -1,   112,    13,   112,    -1,   112,    14,   112,
      -1,   112,    15,   112,    -1,   112,    16,   112,    -1,   112,
      17,   112,    -1,    18,    98,   107,    99,    -1,    19,    98,
     112,   100,   107,    99,    -1,   107,    20,   107,    -1,   107,
      21,   107,    -1,    22,    98,   112,   100,   112,    99,    -1,
      98,   112,    99,    -1,    37,    -1,    38,    -1,    78,    -1,
      79,    -1,    80,    -1,    81,    -1,    82,    -1,    83,    -1,
      77,    98,   112,    99,    -1,    84,    -1,    84,    98,   107,
      99,    -1,    84,    98,   107,   100,   112,    99,    -1,    85,
      98,   112,   100,   107,    99,    -1,    85,    98,   112,   100,
     107,   100,   112,    99,    -1,    86,    -1,    86,    98,   107,
      99,    -1,    86,    98,   107,   100,   112,    99,    -1,    87,
      98,   112,   100,   107,    99,    -1,    87,    98,   112,   100,
     107,   100,   112,    99,    -1,    39,    -1,    40,    -1,    41,
      -1,    42,    -1,    43,    -1,    44,    -1,    45,    -1,    46,
      -1,    35,    -1,    36,    -1,   107,    -1,   112,     7,   112,
      -1,   112,     8,   112,    -1,   112,     9,   112,    -1,   112,
      10,   112,    -1,    53,    98,   112,    99,    -1,    54,    98,
     112,    99,    -1,    55,    98,   112,    99,    -1,    61,    98,
     112,    99,    -1,    60,    98,   112,    99,    -1,    56,    98,
     112,    99,    -1,    56,    98,   112,   100,   112,    99,    -1,
      57,    98,   112,    99,    -1,    58,    98,   112,    99,    -1,
      59,    98,   112,    99,    -1,    62,    98,   112,    99,    -1,
      62,    98,   112,   100,    29,    99,    -1,    63,    98,   112,
      99,    -1,    63,    98,   112,   100,    29,    99,    -1,    64,
      98,   112,   100,   112,    99,    -1,    64,    98,   112,   100,
     112,   100,    29,    99,    -1,    65,    98,   112,    99,    -1,
      65,    98,   112,   100,    30,    31,    99,    -1,    65,    98,
     112,   100,    30,    32,    99,    -1,    65,    98,   112,   100,
      30,    33,    99,    -1,    65,    98,   112,   100,    30,    34,
      99,    -1,    65,    98,   112,   100,    29,    99,    -1,    65,
      98,   112,   100,    30,    31,   100,    29,    99,    -1,    65,
      98,   112,   100,    30,    32,   100,    29,    99,    -1,    65,
      98,   112,   100,    30,    33,   100,    29,    99,    -1,    65,
      98,   112,   100,    30,    34,   100,    29,    99,    -1,    66,
      98,   112,    28,   112,    99,    -1,    66,    98,   112,    28,
     112,   100,    30,    31,    99,    -1,    66,    98,   112,    28,
     112,   100,    30,    32,    99,    -1,    66,    98,   112,    28,
     112,   100,    30,    33,    99,    -1,    66,    98,   112,    28,
     112,   100,    30,    34,    99,    -1,    66,    98,   112,    28,
     112,   100,    29,    99,    -1,    66,    98,   112,    28,   112,
     100,    30,    31,   100,    29,    99,    -1,    66,    98,   112,
      28,   112,   100,    30,    32,   100,    29,    99,    -1,    66,
      98,   112,    28,   112,   100,    30,    33,   100,    29,    99,
      -1,    66,    98,   112,    28,   112,   100,    30,    34,   100,
      29,    99,    -1,    67,    98,   112,    28,   112,   100,   112,
      99,    -1,    67,    98,   112,    28,   112,   100,   112,   100,
      29,    99,    -1,    68,    98,   112,    99,    -1,    68,    98,
       5,    99,    -1,    68,    98,     6,    99,    -1,    69,    98,
     112,    99,    -1,    69,    98,     5,    99,    -1,    69,    98,
       6,    99,    -1,    70,    98,   112,    99,    -1,    70,    98,
       5,    99,    -1,    70,    98,     6,    99,    -1,    71,    98,
     112,    99,    -1,    71,    98,     5,    99,    -1,    71,    98,
       6,    99,    -1,    74,    98,   107,    99,    -1,    74,    98,
     107,   100,   107,    99,    -1,    74,    98,   107,   100,    29,
      99,    -1,    74,    98,   107,   100,   107,   100,    29,    99,
      -1,    75,    98,   107,    99,    -1,    75,    98,   107,   100,
     107,    99,    -1,    75,    98,   107,   100,    29,    99,    -1,
      75,    98,   107,   100,   107,   100,    29,    99,    -1,    73,
      98,    37,    99,    -1,    76,    98,    37,    99,    -1,    88,
      98,   112,    99,    -1,    88,    98,   112,   100,   112,    99,
      -1,    89,    98,   112,    99,    -1,    89,    98,   112,   100,
     112,    99,    -1,    90,    98,   112,    99,    -1,    90,    98,
     112,   100,   112,    99,    -1,    91,    98,   112,    99,    -1,
      92,    98,   112,   100,   112,    99,    -1,    92,    98,   112,
     100,   112,   100,   112,    99,    -1,    93,    98,   112,    99,
      -1,    93,    98,   112,   100,   112,    99,    -1,    94,    98,
     112,   100,   107,    99,    -1,    94,    98,   112,   100,   107,
     100,   112,    99,    -1,    94,    98,   112,   100,   107,   100,
     112,   100,   112,   100,   112,    99,    -1,    94,    98,   112,
     100,   107,   100,   112,   100,   112,   100,   112,   100,   112,
      99,    -1,    94,    98,   112,   100,   107,   100,   112,   100,
     112,   100,   112,   100,   112,   100,   112,    99,    -1,    95,
      98,   112,   100,   107,   100,   112,    99,    -1,    95,    98,
     112,   100,   107,    99,    -1,    95,    98,   112,   100,   107,
     100,   112,   100,   112,   100,   112,    99,    -1,    95,    98,
     112,   100,   107,   100,   112,   100,   112,   100,   112,   100,
     112,    99,    -1,    95,    98,   112,   100,   107,   100,   112,
     100,   112,   100,   112,   100,   112,   100,   112,    99,    -1,
      96,    98,   112,    99,    -1,    96,    98,   112,   100,   112,
      99,    -1,    96,    98,   112,   100,   112,   100,   112,   100,
     112,    99,    -1,    96,    98,   112,   100,   112,   100,   112,
     100,   112,   100,   112,    99,    -1,    96,    98,   112,   100,
     112,   100,   112,   100,   112,   100,   112,   100,   112,    99,
      -1,    97,    98,   112,    99,    -1,    97,    98,   112,   100,
     112,    99,    -1,    97,    98,   112,   100,   112,   100,   112,
     100,   112,    99,    -1,    97,    98,   112,   100,   112,   100,
     112,   100,   112,   100,   112,    99,    -1,    97,    98,   112,
     100,   112,   100,   112,   100,   112,   100,   112,   100,   112,
      99,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   149,   149,   172,   177,   184,   185,   189,   190,   199,
     200,   201,   209,   215,   222,   229,   238,   246,   255,   265,
     279,   297,   309,   323,   328,   336,   339,   343,   347,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   373,   378,   384,   390,   398,   399,   400,   401,   412,
     423,   434,   445,   456,   467,   478,   481,   485,   489,   493,
     497,   500,   504,   508,   512,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
     547,   548,   550,   551,   553,   555,   557,   558,   560,   562,
     564,   566,   567,   569,   571,   573,   575,   576,   578,   580,
     582,   584,   586,   588,   590,   592,   594,   596,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   615,   619,   624,   628,   632,   636,   641,   647,
     648,   649,   650,   651,   652,   653,   654,   655,   657,   659,
     661,   663,   668,   673,   678,   684,   690,   695,   700,   705,
     711,   717,   721,   725,   729,   734,   739,   743,   747,   751,
     756
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "SEP", "FIN", "WNUMBER", "WSTRING",
  "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "EQ", "NE", "_IN", "GT", "LT",
  "GE", "LE", "EXISTS", "EXISTSIN", "PRECEDES", "FOLLOWS", "INTABLE",
  "CHECK", "AND", "OR", "NOT", "NEXTBLOCK", "BY", "_STRICT", "AT",
  "BEGINING", "BEGINNING", "END", "BOTH", "VARS", "VARD", "STRING",
  "NUMERIC", "VAR_N", "VAR_NT", "VAR_NS", "VAR_NO", "VAR_NTO", "VAR_NSO",
  "VAR_NEW", "VAR_NEWEST", "TAG", "DTAG", "STAG", "FIX", "I1", "I2", "STR",
  "VAL", "LEN", "STO", "MEM", "EXC", "CLR", "LOWER", "UPPER", "FROM", "TO",
  "BETWEEN", "_DELETE", "REPLACE", "REPLACEOCC", "BFIRST", "EFIRST",
  "BLAST", "ELAST", "REDO", "SORT", "NEXT", "LAST", "TABLE", "ORDINAL",
  "YEAR", "MONTH", "DAY", "HOUR", "MINUTE", "SECOND", "NEXTSUB",
  "NEXTSUBIN", "PREVIOUSSUB", "PREVIOUSSUBIN", "REGFINDNUM", "REGFINDPOS",
  "REGFIND", "REGMATCH", "REGREPLACE", "REGREPLACETABLE", "MOVEBEFORE",
  "MOVEAFTER", "MOVEFIRST", "MOVELAST", "'('", "')'", "','", "$accept",
  "Program", "Rules", "Rule", "SetOfInstr", "Instruction", "CD", "TAGOCC",
  "STAGOCC", "Condition", "Boolean", "Translation", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,    40,    41,
      44
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   101,   102,   103,   103,   104,   104,   105,   105,   106,
     106,   106,   107,   107,   107,   107,   107,   107,   107,   108,
     108,   109,   109,   109,   109,   110,   110,   110,   110,   111,
     111,   111,   111,   111,   111,   111,   111,   111,   111,   111,
     111,   111,   111,   111,   111,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     2,     2,     3,     3,     1,     1,
       1,     1,     1,     2,     2,     3,     1,     1,     2,     1,
       4,     1,     4,     1,     1,     2,     1,     3,     4,     3,
       3,     3,     2,     3,     3,     3,     3,     3,     3,     3,
       4,     6,     3,     3,     6,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     6,     6,     8,
       1,     4,     6,     6,     8,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
       4,     6,     4,     6,     6,     8,     4,     7,     7,     7,
       7,     6,     9,     9,     9,     9,     6,     9,     9,     9,
       9,     8,    11,    11,    11,    11,     8,    10,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
       4,     6,     6,     8,     4,     6,     6,     8,     4,     4,
       4,     6,     4,     6,     4,     6,     4,     6,     8,     4,
       6,     6,     8,    12,    14,    16,     8,     6,    12,    14,
      16,     4,     6,    10,    12,    14,     4,     6,    10,    12,
      14
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       0,     0,     0,    26,    73,    74,    46,    47,    65,    66,
      67,    68,    69,    70,    71,    72,    19,    21,    17,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      11,     0,     0,     0,     0,     0,    48,    49,    50,    51,
      52,    53,    55,     0,    60,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     2,     3,
       0,     8,    75,    12,    16,     9,    10,     4,     0,     0,
       0,     0,     0,    75,    25,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       5,    14,    13,    18,     0,     0,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    27,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    45,     6,     7,    15,    76,
      77,    78,    79,     0,     0,     0,    29,    42,    43,    30,
      31,    33,    34,    35,    36,    37,    38,    39,    28,    20,
      22,    80,    81,    82,    85,     0,    87,    88,    89,    84,
      83,    90,     0,    92,     0,     0,    96,     0,     0,     0,
     119,   120,   118,   122,   123,   121,   125,   126,   124,   128,
     129,   127,   138,   130,     0,   134,     0,   139,    54,    56,
       0,     0,    61,     0,     0,   140,     0,   142,     0,   144,
       0,   146,     0,   149,     0,     0,     0,   161,     0,   166,
       0,     0,    40,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    86,    91,    93,    94,     0,   101,     0,     0,
       0,     0,   106,     0,     0,   132,   131,     0,   136,   135,
       0,    57,    58,     0,    62,    63,     0,   141,   143,   145,
     147,     0,   150,   151,     0,   157,     0,   162,     0,   167,
       0,    41,    44,     0,    97,     0,    98,     0,    99,     0,
     100,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    95,     0,     0,     0,     0,   111,
       0,     0,     0,     0,   116,     0,   133,   137,    59,    64,
     148,   152,     0,   156,     0,     0,     0,   102,   103,   104,
     105,   107,     0,   108,     0,   109,     0,   110,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   117,     0,
       0,   163,     0,   168,     0,   112,   113,   114,   115,     0,
       0,     0,     0,   153,     0,   158,     0,   164,     0,   169,
       0,     0,     0,     0,     0,   154,     0,   159,     0,   165,
     170,     0,     0,   155,   160
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int8 yydefgoto[] =
{
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      84,    76
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -129
static const yytype_int16 yypact[] =
{
    1065,  1222,  1146,   -89,  -129,  -129,  -129,  -129,  -129,  -129,
    -129,  -129,  -129,  -129,  -129,  -129,   -85,   -75,  -129,  -129,
    -129,   -69,   -64,   -53,   -39,   -31,   -20,    15,    38,    60,
      64,    85,    98,   125,   134,   144,   181,   183,   189,   193,
    -129,   209,   211,   230,   242,   250,  -129,  -129,  -129,  -129,
    -129,  -129,   255,   257,   259,   276,   295,   303,   324,   325,
     331,   333,   343,   349,   355,   425,  1351,   143,  -129,  -129,
       8,  -129,  -129,   -44,   219,  -129,   398,  -129,   429,   466,
     490,  1146,  1146,    45,    58,   374,  1286,  1351,  1351,  1351,
    1351,  1351,  1351,  1351,  1351,  1351,  1351,  1351,  1351,  1351,
    1351,  1351,  1351,  1351,   516,   610,   704,   798,   238,   345,
     345,   246,  1351,   345,  1351,   345,  1351,  1351,  1351,  1351,
    1351,  1351,  1351,  1351,  1351,  1351,  1351,    32,  -129,   422,
    -129,  -129,   269,  -129,  1351,  1351,  1351,  1351,   345,  1351,
    1351,    58,   -22,   356,   345,   345,  1146,  1146,  1351,  1351,
    1351,  1351,  1351,  1351,  1351,  -129,   171,   326,   721,   728,
     814,   821,     7,   890,   894,   898,   902,   907,    28,    40,
      11,    61,    48,    53,   314,   344,   914,   351,   518,   918,
     523,   526,   922,   527,   530,   926,   531,    30,    42,   534,
     930,    56,   177,   118,   231,    65,   159,   163,   934,   370,
     167,   532,   536,   185,   190,  -129,  -129,  -129,  -129,  -129,
    -129,  -129,  -129,   535,   540,   611,  -129,  -129,  -129,    58,
      58,   398,   398,   398,   398,   398,   398,   398,  -129,  -129,
    -129,  -129,  -129,  -129,  -129,  1351,  -129,  -129,  -129,  -129,
    -129,  -129,   316,  -129,   395,  1351,  -129,   215,  1351,  1351,
    -129,  -129,  -129,  -129,  -129,  -129,  -129,  -129,  -129,  -129,
    -129,  -129,  -129,  -129,   -25,  -129,   -19,  -129,  -129,  -129,
    1351,   345,  -129,  1351,   345,  -129,  1351,  -129,  1351,  -129,
    1351,  -129,  1351,  -129,  1351,   345,   345,  -129,  1351,  -129,
    1351,  1222,  -129,   345,  1351,   938,   538,   539,   194,   559,
      20,   198,   634,   583,   149,   633,   161,   942,   165,   946,
     173,   950,   954,   958,   202,   962,   196,   200,   206,   212,
     653,   966,  -129,  -129,  -129,  -129,   495,  -129,   204,   214,
     239,   251,  -129,   346,  1351,  -129,  -129,   499,  -129,  -129,
     602,  -129,  -129,  1351,  -129,  -129,  1351,  -129,  -129,  -129,
    -129,  1351,  -129,  -129,  1351,  -129,  1351,  -129,  1351,  -129,
    1351,  -129,  -129,   677,  -129,   606,  -129,   777,  -129,   778,
    -129,   779,   711,   378,   217,   712,   715,   970,   974,   978,
     221,   227,   705,   709,  -129,   716,   719,   720,   726,  -129,
     299,   317,   319,   321,  -129,   783,  -129,  -129,  -129,  -129,
    -129,  -129,  1351,  -129,  1351,  1351,  1351,  -129,  -129,  -129,
    -129,  -129,   787,  -129,   797,  -129,   803,  -129,   817,   771,
     713,   717,   243,   247,   819,   820,   891,   892,  -129,  1351,
    1351,  -129,  1351,  -129,  1351,  -129,  -129,  -129,  -129,   315,
     352,   426,   430,  -129,  1351,  -129,  1351,  -129,  1351,  -129,
    1351,   524,   528,   995,  1000,  -129,  1351,  -129,  1351,  -129,
    -129,  1071,  1075,  -129,  -129
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -129,  -129,  -129,   638,  -128,  -129,    44,  -129,   660,  -129,
     -38,    -2
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
static const yytype_uint16 yytable[] =
{
      85,   207,   146,   147,   303,    17,   131,    19,    20,    86,
     305,   129,   130,    87,   134,   135,   136,   137,   134,   135,
     136,   137,    16,    88,    17,    18,    19,    20,    16,    89,
      17,    18,    19,    20,    90,   134,   135,   136,   137,   134,
     135,   136,   137,   141,   142,    91,    83,   134,   135,   136,
     137,   328,   329,   330,   331,   134,   135,   136,   137,    92,
     134,   135,   136,   137,   127,   144,   145,    93,   134,   135,
     136,   137,   134,   135,   136,   137,   248,   216,    94,    85,
     143,   249,   146,   147,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   176,   179,   182,   185,   234,   235,   219,   220,
     190,   245,   192,    95,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    83,    83,   241,   242,   263,
     264,   205,   209,   210,   211,   212,    96,   214,   215,   243,
     244,   265,   266,   128,    85,    85,   221,   222,   223,   224,
     225,   226,   227,   187,   188,   269,   270,   191,    97,   193,
     246,   247,    98,   207,   275,   276,   134,   135,   136,   137,
     134,   135,   136,   137,   134,   135,   136,   137,   134,   135,
     136,   137,   213,    99,   134,   135,   136,   137,   217,   218,
      83,    83,   134,   135,   136,   137,   100,   134,   135,   136,
     137,   134,   135,   136,   137,   134,   135,   136,   137,   134,
     135,   136,   137,   134,   135,   136,   137,   272,   273,   134,
     135,   136,   137,   101,   134,   135,   136,   137,   134,   135,
     136,   137,   102,   295,   134,   135,   136,   137,   134,   135,
     136,   137,   103,   298,   299,   300,   301,   302,   336,   337,
     134,   135,   136,   137,   134,   135,   136,   137,   277,   278,
     339,   340,   279,   280,   342,   343,   283,   284,   307,   133,
     228,   309,   345,   346,   311,   186,   312,   271,   313,   104,
     314,   105,   315,   189,   287,   288,   318,   106,   319,   289,
     290,   107,   321,   325,   326,   353,   354,   332,   333,   355,
     356,   350,   351,   364,   365,   357,   358,   108,   304,   109,
     306,   359,   360,   366,   367,   308,   394,   395,   310,   208,
     401,   402,   134,   135,   136,   137,   403,   404,   110,   316,
     317,   274,   374,   134,   135,   136,   137,   320,   368,   369,
     111,   377,   431,   432,   378,   296,   433,   434,   112,   379,
     370,   371,   380,   113,   381,   114,   382,   115,   383,   134,
     135,   136,   137,   134,   135,   136,   137,   148,   149,   150,
     151,   152,   153,   154,   116,   372,   373,   134,   135,   136,
     137,   134,   135,   136,   137,   148,   149,   150,   151,   152,
     153,   154,    16,   117,    17,    18,    19,    20,   411,   412,
     420,   118,   421,   422,   423,   134,   135,   136,   137,   390,
     391,   392,   393,   250,   443,   444,   413,   414,   415,   416,
     417,   418,   119,   120,   297,   229,   206,   439,   440,   121,
     441,   122,   442,   134,   135,   136,   137,   134,   135,   136,
     137,   123,   451,   251,   452,     2,   453,   124,   454,     3,
     253,   445,   446,   125,   461,   205,   462,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
     282,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,   174,   175,   126,   363,   447,   448,   138,   375,   449,
     450,   134,   135,   136,   137,   134,   135,   136,   137,   134,
     135,   136,   137,   134,   135,   136,   137,   134,   135,   136,
     137,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,   139,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,   140,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,   177,   178,   254,   134,   135,
     136,   137,   256,   455,   456,   257,   259,   457,   458,   260,
     262,   376,   285,   267,   292,   385,   286,   323,   324,    77,
     293,   134,   135,   136,   137,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,   327,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,   335,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,   180,
     181,   294,   134,   135,   136,   137,   134,   135,   136,   137,
     134,   135,   136,   137,   134,   135,   136,   137,   134,   135,
     136,   137,   338,   132,   334,   134,   135,   136,   137,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,   361,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,   384,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,   183,   184,   405,   386,   387,   388,   406,
     389,   396,   419,   429,   397,   407,   424,   430,   408,   409,
     230,   134,   135,   136,   137,   410,   425,   231,   134,   135,
     136,   137,   426,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,   427,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
     428,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,   134,   135,   136,
     137,   134,   135,   136,   137,   134,   135,   136,   137,   134,
     135,   136,   137,   232,   134,   135,   136,   137,   435,   436,
     233,   134,   135,   136,   137,   134,   135,   136,   137,   134,
     135,   136,   137,   134,   135,   136,   137,   134,   135,   136,
     137,   134,   135,   136,   137,   134,   135,   136,   137,   134,
     135,   136,   137,   134,   135,   136,   137,   134,   135,   136,
     137,   134,   135,   136,   137,   134,   135,   136,   137,   134,
     135,   136,   137,   134,   135,   136,   137,   134,   135,   136,
     137,   134,   135,   136,   137,   134,   135,   136,   137,   236,
     437,   438,     0,   237,     0,     0,     0,   238,     0,     0,
       0,   239,   134,   135,   136,   137,   240,   134,   135,   136,
     137,     0,     0,   252,     0,     0,     0,   255,     0,     0,
       0,   258,     0,     0,     0,   261,     0,     0,     0,   268,
       0,     0,     0,   281,     0,     0,     0,   322,     0,     0,
       0,   341,     0,     0,     0,   344,     0,     0,     0,   347,
       0,     0,     0,   348,     0,     0,     0,   349,     0,     0,
       0,   352,     0,     0,     0,   362,     0,     0,     0,   398,
       0,     0,     1,   399,     0,     0,     0,   400,   134,   135,
     136,   137,   134,   135,   136,   137,     0,     0,     2,     0,
       0,     0,     3,     0,   459,     0,     0,     0,     0,   460,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,     0,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    78,    79,     0,     0,    80,     0,
     463,     0,    81,     0,   464,     0,     0,     0,     0,     0,
       0,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,     0,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    82,     2,     0,     0,     0,     3,
       0,     0,     0,     0,     0,     0,     0,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
       0,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,     0,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,     0,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,   155,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,     0,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,     0,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66
};

static const yytype_int16 yycheck[] =
{
       2,   129,    24,    25,    29,    49,    50,    51,    52,    98,
      29,     3,     4,    98,     7,     8,     9,    10,     7,     8,
       9,    10,    47,    98,    49,    50,    51,    52,    47,    98,
      49,    50,    51,    52,    98,     7,     8,     9,    10,     7,
       8,     9,    10,    81,    82,    98,     2,     7,     8,     9,
      10,    31,    32,    33,    34,     7,     8,     9,    10,    98,
       7,     8,     9,    10,    66,    20,    21,    98,     7,     8,
       9,    10,     7,     8,     9,    10,    28,    99,    98,    81,
      82,    28,    24,    25,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,    99,   100,   146,   147,
     112,   100,   114,    98,   116,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,    81,    82,    99,   100,    99,
     100,    99,   134,   135,   136,   137,    98,   139,   140,    99,
     100,    99,   100,     0,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   109,   110,    99,   100,   113,    98,   115,
      99,   100,    98,   291,    99,   100,     7,     8,     9,    10,
       7,     8,     9,    10,     7,     8,     9,    10,     7,     8,
       9,    10,   138,    98,     7,     8,     9,    10,   144,   145,
     146,   147,     7,     8,     9,    10,    98,     7,     8,     9,
      10,     7,     8,     9,    10,     7,     8,     9,    10,     7,
       8,     9,    10,     7,     8,     9,    10,    99,   100,     7,
       8,     9,    10,    98,     7,     8,     9,    10,     7,     8,
       9,    10,    98,   235,     7,     8,     9,    10,     7,     8,
       9,    10,    98,   245,    29,    30,   248,   249,    99,   100,
       7,     8,     9,    10,     7,     8,     9,    10,    99,   100,
      99,   100,    99,   100,    99,   100,    99,   100,   270,    50,
      99,   273,    99,   100,   276,    37,   278,   100,   280,    98,
     282,    98,   284,    37,    99,   100,   288,    98,   290,    99,
     100,    98,   294,    99,   100,    99,   100,    99,   100,    99,
     100,    99,   100,    99,   100,    99,   100,    98,   264,    98,
     266,    99,   100,    99,   100,   271,    99,   100,   274,    50,
      99,   100,     7,     8,     9,    10,    99,   100,    98,   285,
     286,   100,   334,     7,     8,     9,    10,   293,    99,   100,
      98,   343,    99,   100,   346,    29,    99,   100,    98,   351,
      99,   100,   354,    98,   356,    98,   358,    98,   360,     7,
       8,     9,    10,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    98,    29,    30,     7,     8,     9,
      10,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    47,    98,    49,    50,    51,    52,    99,   100,
     402,    98,   404,   405,   406,     7,     8,     9,    10,    31,
      32,    33,    34,    99,    99,   100,    99,   100,    99,   100,
      99,   100,    98,    98,    29,    99,     4,   429,   430,    98,
     432,    98,   434,     7,     8,     9,    10,     7,     8,     9,
      10,    98,   444,    99,   446,    23,   448,    98,   450,    27,
      99,    99,   100,    98,   456,    99,   458,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
     100,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,     5,     6,    98,    29,    99,   100,    98,    29,    99,
     100,     7,     8,     9,    10,     7,     8,     9,    10,     7,
       8,     9,    10,     7,     8,     9,    10,     7,     8,     9,
      10,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    98,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    98,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,     5,     6,    99,     7,     8,
       9,    10,    99,    99,   100,    99,    99,    99,   100,    99,
      99,    29,   100,    99,    99,    29,   100,    99,    99,     1,
     100,     7,     8,     9,    10,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    99,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    99,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,     5,
       6,   100,     7,     8,     9,    10,     7,     8,     9,    10,
       7,     8,     9,    10,     7,     8,     9,    10,     7,     8,
       9,    10,    99,    73,   100,     7,     8,     9,    10,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    99,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    99,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,     5,     6,   100,    29,    29,    29,   100,
      99,    99,    29,   100,    99,    99,    29,   100,    99,    99,
      99,     7,     8,     9,    10,    99,    29,    99,     7,     8,
       9,    10,    29,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    29,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      99,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,     7,     8,     9,
      10,     7,     8,     9,    10,     7,     8,     9,    10,     7,
       8,     9,    10,    99,     7,     8,     9,    10,    99,    99,
      99,     7,     8,     9,    10,     7,     8,     9,    10,     7,
       8,     9,    10,     7,     8,     9,    10,     7,     8,     9,
      10,     7,     8,     9,    10,     7,     8,     9,    10,     7,
       8,     9,    10,     7,     8,     9,    10,     7,     8,     9,
      10,     7,     8,     9,    10,     7,     8,     9,    10,     7,
       8,     9,    10,     7,     8,     9,    10,     7,     8,     9,
      10,     7,     8,     9,    10,     7,     8,     9,    10,    99,
      99,    99,    -1,    99,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    99,     7,     8,     9,    10,    99,     7,     8,     9,
      10,    -1,    -1,    99,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    99,    -1,    -1,    -1,    99,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    99,    -1,    -1,    -1,    99,    -1,    -1,    -1,    99,
      -1,    -1,    -1,    99,    -1,    -1,    -1,    99,    -1,    -1,
      -1,    99,    -1,    -1,    -1,    99,    -1,    -1,    -1,    99,
      -1,    -1,     7,    99,    -1,    -1,    -1,    99,     7,     8,
       9,    10,     7,     8,     9,    10,    -1,    -1,    23,    -1,
      -1,    -1,    27,    -1,    99,    -1,    -1,    -1,    -1,    99,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    18,    19,    -1,    -1,    22,    -1,
      99,    -1,    26,    -1,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    23,    -1,    -1,    -1,    27,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    96,    97,    98,    99,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     7,    23,    27,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    93,    94,    95,    96,    97,    98,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   112,   104,    18,    19,
      22,    26,    98,   107,   111,   112,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
      98,    98,    98,    98,    98,    98,    98,   112,     0,     3,
       4,    50,   109,    50,     7,     8,     9,    10,    98,    98,
      98,   111,   111,   112,    20,    21,    24,    25,    11,    12,
      13,    14,    15,    16,    17,    99,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,     5,     6,   112,     5,     6,   112,
       5,     6,   112,     5,     6,   112,    37,   107,   107,    37,
     112,   107,   112,   107,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   112,   112,    99,     4,   105,    50,   112,
     112,   112,   112,   107,   112,   112,    99,   107,   107,   111,
     111,   112,   112,   112,   112,   112,   112,   112,    99,    99,
      99,    99,    99,    99,    99,   100,    99,    99,    99,    99,
      99,    99,   100,    99,   100,   100,    99,   100,    28,    28,
      99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
      99,    99,    99,    99,   100,    99,   100,    99,    99,    99,
     100,   100,    99,   100,   100,    99,   100,    99,   100,    99,
     100,    99,   100,    99,   100,   100,   100,    99,   100,    99,
     100,     3,    99,   100,   100,   112,    29,    29,   112,    29,
      30,   112,   112,    29,   107,    29,   107,   112,   107,   112,
     107,   112,   112,   112,   112,   112,   107,   107,   112,   112,
     107,   112,    99,    99,    99,    99,   100,    99,    31,    32,
      33,    34,    99,   100,   100,    99,    99,   100,    99,    99,
     100,    99,    99,   100,    99,    99,   100,    99,    99,    99,
      99,   100,    99,    99,   100,    99,   100,    99,   100,    99,
     100,    99,    99,    29,    99,   100,    99,   100,    99,   100,
      99,   100,    29,    30,   112,    29,    29,   112,   112,   112,
     112,   112,   112,   112,    99,    29,    29,    29,    29,    99,
      31,    32,    33,    34,    99,   100,    99,    99,    99,    99,
      99,    99,   100,    99,   100,   100,   100,    99,    99,    99,
      99,    99,   100,    99,   100,    99,   100,    99,   100,    29,
     112,   112,   112,   112,    29,    29,    29,    29,    99,   100,
     100,    99,   100,    99,   100,    99,    99,    99,    99,   112,
     112,   112,   112,    99,   100,    99,   100,    99,   100,    99,
     100,   112,   112,   112,   112,    99,   100,    99,   100,    99,
      99,   112,   112,    99,    99
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)  do    if (yychar == YYEMPTY && yylen == 1)      {        yychar = (Token);        yylval = (Value);        yytoken = YYTRANSLATE (yychar);        YYPOPSTACK (1);        goto yybackup;      }    else      {        yyerror (YY_("syntax error: cannot back up"));        YYERROR;      }  while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)      do        if (YYID (N))  	{  	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;  	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;  	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;  	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;  	}        else  	{  	  (Current).first_line   = (Current).last_line   =  	    YYRHSLOC (Rhs, 0).last_line;  	  (Current).first_column = (Current).last_column =  	    YYRHSLOC (Rhs, 0).last_column;  	}      while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)       fprintf (File, "%d.%d-%d.%d",  	      (Loc).first_line, (Loc).first_column,  	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)  do {    if (yydebug)      YYFPRINTF Args;  } while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)  do {    if (yydebug)      {        YYFPRINTF (stderr, "%s ", Title);        yy_symbol_print (stderr,  		  Type, Value);        YYFPRINTF (stderr, "\n");      }  } while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
void MarcParser::yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
void MarcParser::yy_symbol_value_print (yyoutput, yytype, yyvaluep)
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
void MarcParser::yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
void MarcParser::yy_symbol_print (yyoutput, yytype, yyvaluep)
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
void MarcParser::yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
void MarcParser::yy_stack_print (bottom, top)
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)  do {    if (yydebug)      yy_stack_print ((Bottom), (Top));  } while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
void MarcParser::yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
void MarcParser::yy_reduce_print (yyvsp, yyrule)
#endif
{
  int yynrhs = yyr2[yyrule];
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)  do {    if (yydebug)      yy_reduce_print (yyvsp, Rule);  } while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
void MarcParser::yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
void MarcParser::yydestruct (yymsg, yytype, yyvaluep)
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
#else
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
#else
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */

/* The semantic value of the look-ahead symbol.  */

/* Number of syntax errors so far.  */



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
int MarcParser::yyparse(void *YYPARSE_PARAM)
#else
int MarcParser::yyparse(YYPARSE_PARAM)
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__       || defined __cplusplus || defined _MSC_VER)
int MarcParser::yyparse(void)
#else
int MarcParser::yyparse()

#endif
#endif
{
  
  /* Number of tokens to shift before error messages enabled.  */
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

    {
                                  if (!mRedoFlag)
                                  {
                                        FreeTypeInst(S);
                                        CopyInst(&S,(yyval.inst));
                                        FreeTypeInst((yyval.inst));
                                        (yyval.inst)=NULL;
                                        return 1;
                                  }
                                  else
                                  {
                                        FreeTypeInst(S);
                                        S=T;
                                        CopyInst(&T,(yyval.inst));
                                        FreeTypeInst((yyval.inst));
                                        (yyval.inst)=NULL;
                                        if (T->str.str()[0]==0) return 1;
                                        else              return 3;
                                  }
                                }
    break;

  case 3:

    {
                                  CopyInst(&(yyval.inst),S);
                                  FreeTypeInst(S);
                                  S=NULL;
                                }
    break;

  case 4:

    {
                                  (yyval.inst)=Add(D,S);
                                  D=S=NULL;
                                }
    break;

  case 8:

    {
                                  FreeTypeInst(S);
                                  CopyInst(&S,(yyvsp[(1) - (1)].inst));
                                  FreeTypeInst((yyvsp[(1) - (1)].inst));
                                  (yyvsp[(1) - (1)].inst)=NULL;
                                }
    break;

  case 11:

    { PrintDebug("Redo");
                                  CopyInst(&(yyval.inst),S);
                                  mRedoFlag = true;
                                  CopyInst(&T,S);
                                }
    break;

  case 12:

    { PrintDebug("Tagocc");
                                  (yyval.tcd)=(yyvsp[(1) - (1)].tcd);
                                  (yyval.tcd)->Fixed.freestr();
                                  (yyval.tcd)->SubField[0]=0;
                                  (yyval.tcd)->ns=0;
                                }
    break;

  case 13:

    { PrintDebug("Tagocc Stagocc");
                                  (yyval.tcd)=(yyvsp[(1) - (2)].tcd);
                                  (yyval.tcd)->Fixed.freestr();
                                  memmove((yyval.tcd)->SubField, (yyvsp[(2) - (2)].tcd)->SubField, sizeof((yyval.tcd)->SubField));
                                  (yyval.tcd)->ns=(yyvsp[(2) - (2)].tcd)->ns;
                                  FreeCD((yyvsp[(2) - (2)].tcd));
                                  (yyvsp[(2) - (2)].tcd)=NULL;}
    break;

  case 14:

    { PrintDebug("Tagocc Fix");
                                  (yyval.tcd)=(yyvsp[(1) - (2)].tcd);
                                  (yyval.tcd)->SubField[0]=0;
                                  (yyval.tcd)->ns=0;
                                  (yyval.tcd)->Fixed.str((yyvsp[(2) - (2)].inst)->str.str());
                                  FreeTypeInst((yyvsp[(2) - (2)].inst));
                                  (yyvsp[(2) - (2)].inst)=NULL;}
    break;

  case 15:

    { PrintDebug("Tagocc Stagocc Fix");
                                  (yyval.tcd)=(yyvsp[(1) - (3)].tcd);
                                  strcpy((yyval.tcd)->SubField,(yyvsp[(2) - (3)].tcd)->SubField);
                                  (yyval.tcd)->ns=(yyvsp[(2) - (3)].tcd)->ns;
                                  (yyval.tcd)->Fixed.str((yyvsp[(3) - (3)].inst)->str.str());
                                  FreeCD((yyvsp[(2) - (3)].tcd));
                                  (yyvsp[(2) - (3)].tcd)=NULL;
                                  FreeTypeInst((yyvsp[(3) - (3)].inst));
                                  (yyvsp[(3) - (3)].inst)=NULL;}
    break;

  case 16:

    { PrintDebug("Stagocc");
                                  (yyval.tcd)=(yyvsp[(1) - (1)].tcd);
                                  (yyval.tcd)->Fixed.freestr();
                                  if ((yyval.tcd)->Output)
                                    strcpy((yyval.tcd)->Field, mCDOut->GetTag());
                                  else
                                    strcpy((yyval.tcd)->Field, CDIn->Field);
                                  (yyval.tcd)->nt=0; }
    break;

  case 17:

    { PrintDebug("Fix");
                                  (yyval.tcd)=AllocCD();
                                  strcpy((yyval.tcd)->Field,CDIn->Field);
                                  (yyval.tcd)->nt=0;
                                  strcpy((yyval.tcd)->SubField,CDIn->SubField);
                                  (yyval.tcd)->ns=0;
                                  (yyval.tcd)->Fixed.str((yyvsp[(1) - (1)].inst)->str.str());
                                  FreeTypeInst((yyvsp[(1) - (1)].inst));
                                  (yyvsp[(1) - (1)].inst)=NULL;}
    break;

  case 18:

    { PrintDebug("Stagocc Fix");
                                  (yyval.tcd)=(yyvsp[(1) - (2)].tcd);
                                  (yyval.tcd)->Fixed.str((yyvsp[(2) - (2)].inst)->str.str());
                                  strcpy((yyval.tcd)->Field,CDIn->Field);
                                  (yyval.tcd)->nt=0;
                                  FreeTypeInst((yyvsp[(2) - (2)].inst));
                                  (yyvsp[(2) - (2)].inst)=NULL;}
    break;

  case 19:

    { PrintDebug("Tag");
                                          (yyval.tcd)=AllocCD();
                                          if (*(yyvsp[(1) - (1)].inst)->str.str() == '%')
                                          {
                                            (yyval.tcd)->Output = true;
                                            strcpy((yyval.tcd)->Field,(yyvsp[(1) - (1)].inst)->str.str() + 1);
                                          }
                                          else
                                          {  
                                            strcpy((yyval.tcd)->Field,(yyvsp[(1) - (1)].inst)->str.str());
                                          }
                                          (yyval.tcd)->nt=0;
                                          FreeTypeInst((yyvsp[(1) - (1)].inst));
                                          (yyvsp[(1) - (1)].inst)=NULL; }
    break;

  case 20:

    { PrintDebug("Tag(...)");
                                          (yyval.tcd)=AllocCD();
                                          if (*(yyvsp[(1) - (4)].inst)->str.str() == '%')
                                          {
                                            (yyval.tcd)->Output = true;
                                            strcpy((yyval.tcd)->Field,(yyvsp[(1) - (4)].inst)->str.str() + 1);
                                          }
                                          else
                                          {  
                                            strcpy((yyval.tcd)->Field,(yyvsp[(1) - (4)].inst)->str.str());
                                          }
                                          FreeTypeInst((yyvsp[(1) - (4)].inst));
                                          (yyvsp[(1) - (4)].inst)=NULL;
                                          (yyval.tcd)->nt=(yyvsp[(3) - (4)].inst)->val;
                                          FreeTypeInst((yyvsp[(3) - (4)].inst));
                                          (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 21:

    { PrintDebug("Stag");
                                          (yyval.tcd)=AllocCD();
                                          if (*(yyvsp[(1) - (1)].inst)->str.str() == '%')
                                          {
                                            (yyval.tcd)->Output = true;
                                            strcpy((yyval.tcd)->SubField,(yyvsp[(1) - (1)].inst)->str.str() + 1);
                                          }
                                          else
                                            strcpy((yyval.tcd)->SubField,(yyvsp[(1) - (1)].inst)->str.str());
                                          (yyval.tcd)->ns=0;
                                          FreeTypeInst((yyvsp[(1) - (1)].inst));
                                          (yyvsp[(1) - (1)].inst)=NULL; }
    break;

  case 22:

    { PrintDebug("Stag(...)");
                                          (yyval.tcd)=AllocCD();
                                          if (*(yyvsp[(1) - (4)].inst)->str.str() == '%')
                                          {
                                            (yyval.tcd)->Output = true;
                                            strcpy((yyval.tcd)->SubField,(yyvsp[(1) - (4)].inst)->str.str() + 1);
                                          }
                                          else
                                            strcpy((yyval.tcd)->SubField,(yyvsp[(1) - (4)].inst)->str.str());
                                          FreeTypeInst((yyvsp[(1) - (4)].inst));
                                          (yyvsp[(1) - (4)].inst)=NULL;
                                          (yyval.tcd)->ns=(yyvsp[(3) - (4)].inst)->val;
                                          FreeTypeInst((yyvsp[(3) - (4)].inst));
                                          (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 23:

    { PrintDebug("I1");
                                          (yyval.tcd)=AllocCD();
                                          strcpy((yyval.tcd)->SubField,"I1");
                                          (yyval.tcd)->ns=0;
                                        }
    break;

  case 24:

    { PrintDebug("I2");
                                          (yyval.tcd)=AllocCD();
                                          strcpy((yyval.tcd)->SubField,"I2");
                                          (yyval.tcd)->ns=0;
                                        }
    break;

  case 25:

    { PrintDebug("Condition");
                                          return ((yyvsp[(2) - (2)].code)) ? 4 : 2;
                                        }
    break;

  case 26:

    { PrintDebug("NextBlock");
										  mChangeBlock = true;
										  return 2;
										}
    break;

  case 27:

    { PrintDebug("NextBlock");
										  mChangeBlock = true;
										  return 2;
										}
    break;

  case 28:

    { PrintDebug("NextBlock(...)");
										  mChangeBlock = true;
										  mNextBlockName = (yyvsp[(3) - (4)].inst)->str;
										  return 2;
										}
    break;

  case 29:

    { PrintDebug("(B...)"); (yyval.code)=(yyvsp[(2) - (3)].code); }
    break;

  case 30:

    { PrintDebug("B...and B..."); (yyval.code) = (yyvsp[(1) - (3)].code) && (yyvsp[(3) - (3)].code); }
    break;

  case 31:

    { PrintDebug("B...or B..."); (yyval.code) = (yyvsp[(1) - (3)].code) || (yyvsp[(3) - (3)].code); }
    break;

  case 32:

    { PrintDebug("!B..."); (yyval.code) = !(yyvsp[(2) - (2)].code); }
    break;

  case 33:

    { PrintDebug("...=..."); (yyval.code) = BoolEQ((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 34:

    { PrintDebug("...!=..."); (yyval.code) = !BoolEQ((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 35:

    { PrintDebug("..._In..."); (yyval.code) = BoolIn((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 36:

    { PrintDebug("...>..."); (yyval.code) = BoolGT((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 37:

    { PrintDebug("...<..."); (yyval.code) = BoolGT((yyvsp[(3) - (3)].inst),(yyvsp[(1) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 38:

    { PrintDebug("...>=..."); (yyval.code) = BoolGE((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 39:

    { PrintDebug("...<=..."); (yyval.code) = BoolGE((yyvsp[(3) - (3)].inst),(yyvsp[(1) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 40:

    { PrintDebug("Exists(...)");
                                          (yyval.code)=Exists((yyvsp[(3) - (4)].tcd));
                                          FreeCD((yyvsp[(3) - (4)].tcd)); 
                                          if ((yyval.code)==2) return 2;
                                          (yyvsp[(3) - (4)].tcd)=NULL; 
                                        }
    break;

  case 41:

    { PrintDebug("ExistsIn(..., ...)");
                                          (yyval.code)=ExistsIn((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].tcd));
                                          FreeTypeInst((yyvsp[(3) - (6)].inst)); (yyvsp[(3) - (6)].inst) = NULL;
                                          FreeCD((yyvsp[(5) - (6)].tcd)); (yyvsp[(5) - (6)].tcd) = NULL;
                                        }
    break;

  case 42:

    { PrintDebug("...Precedes...");
                                          (yyval.code)=Precedes((yyvsp[(1) - (3)].tcd),(yyvsp[(3) - (3)].tcd));
                                          FreeCD((yyvsp[(1) - (3)].tcd)); (yyvsp[(1) - (3)].tcd)=NULL;
                                          FreeCD((yyvsp[(3) - (3)].tcd)); (yyvsp[(3) - (3)].tcd)=NULL; 
                                          if ((yyval.code)==2) return 2;
                                        }
    break;

  case 43:

    { PrintDebug("...Follows...");
                                          (yyval.code)=Precedes((yyvsp[(3) - (3)].tcd),(yyvsp[(1) - (3)].tcd));
                                          FreeCD((yyvsp[(3) - (3)].tcd)); (yyvsp[(3) - (3)].tcd)=NULL;
                                          FreeCD((yyvsp[(1) - (3)].tcd)); (yyvsp[(1) - (3)].tcd)=NULL; 
                                          if ((yyval.code)==2) return 2;
                                        }
    break;

  case 44:

    { PrintDebug("InTable(..., ...)");
                                          (yyval.code)=InTable((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].inst));
                                          (yyvsp[(3) - (6)].inst) = NULL;
                                          (yyvsp[(5) - (6)].inst) = NULL;
                                        }
    break;

  case 45:

    { PrintDebug("(...)");(yyval.inst)=(yyvsp[(2) - (3)].inst); }
    break;

  case 48:

    {
                                          time_t ns;
                                          struct tm *lt;
                                          time(&ns);
                                          lt=localtime(&ns);
                                          (yyval.inst)=AllocTypeInst();
                                          char tempo[10];
                                          sprintf(tempo,"%04d",1900+lt->tm_year);
                                          (yyval.inst)->str.str(tempo);
                                          (yyval.inst)->val=0;
                                        }
    break;

  case 49:

    {
                                          time_t ns;
                                          struct tm *lt;
                                          time(&ns);
                                          lt=localtime(&ns);
                                          (yyval.inst)=AllocTypeInst();
                                          char tempo[10];
                                          sprintf(tempo,"%02d",lt->tm_mon+1);
                                          (yyval.inst)->str.str(tempo);
                                          (yyval.inst)->val=0;
                                        }
    break;

  case 50:

    {
                                          time_t ns;
                                          struct tm *lt;
                                          time(&ns);
                                          lt=localtime(&ns);
                                          (yyval.inst)=AllocTypeInst();
                                          char tempo[10];
                                          sprintf(tempo,"%02d",lt->tm_mday);
                                          (yyval.inst)->str.str(tempo);
                                          (yyval.inst)->val=0;
                                        }
    break;

  case 51:

    {
                                          time_t ns;
                                          struct tm *lt;
                                          time(&ns);
                                          lt=localtime(&ns);
                                          (yyval.inst)=AllocTypeInst();
                                          char tempo[10];
                                          sprintf(tempo,"%02d",lt->tm_hour);
                                          (yyval.inst)->str.str(tempo);
                                          (yyval.inst)->val=0;
                                        }
    break;

  case 52:

    {
                                          time_t ns;
                                          struct tm *lt;
                                          time(&ns);
                                          lt=localtime(&ns);
                                          (yyval.inst)=AllocTypeInst();
                                          char tempo[10];
                                          sprintf(tempo,"%02d",lt->tm_min);
                                          (yyval.inst)->str.str(tempo);
                                          (yyval.inst)->val=0;
                                        }
    break;

  case 53:

    {
                                          time_t ns;
                                          struct tm *lt;
                                          time(&ns);
                                          lt=localtime(&ns);
                                          (yyval.inst)=AllocTypeInst();
                                          char tempo[10];
                                          sprintf(tempo,"%02d",lt->tm_sec);
                                          (yyval.inst)->str.str(tempo);
                                          (yyval.inst)->val=0;
                                        }
    break;

  case 54:

    {
                                          (yyval.inst)=AllocTypeInst();
                                          char tmp1[20];
                                          sprintf(tmp1, "%d", m_ordinal);
                                          for (int i = strlen(tmp1); i < (yyvsp[(3) - (4)].inst)->val; ++i)
                                            (yyval.inst)->str.append_char('0');
                                          (yyval.inst)->str.append(tmp1);
                                          (yyval.inst)->val = 0;
                                          FreeTypeInst((yyvsp[(3) - (4)].inst));
                                          (yyvsp[(3) - (4)].inst)=NULL;
                                        }
    break;

  case 55:

    {
                                          PrintDebug("NextSub"); (yyval.inst)=NextSub(NULL, NULL);
                                        }
    break;

  case 56:

    { 
                                          PrintDebug("NextSub(...)");
                                          (yyval.inst)=NextSub((yyvsp[(3) - (4)].tcd), NULL);
                                        }
    break;

  case 57:

    { 
                                          PrintDebug("NextSub(..., ...)");
                                          (yyval.inst)=NextSub((yyvsp[(3) - (6)].tcd), (yyvsp[(5) - (6)].inst));
                                        }
    break;

  case 58:

    { 
                                          PrintDebug("NextSubIn(..., ...)");
                                          (yyval.inst)=NextSubIn((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].tcd), NULL);
                                        }
    break;

  case 59:

    { 
                                          PrintDebug("NextSubIn(..., ..., ...)");
                                          (yyval.inst)=NextSubIn((yyvsp[(3) - (8)].inst), (yyvsp[(5) - (8)].tcd), (yyvsp[(7) - (8)].inst));
                                        }
    break;

  case 60:

    {
                                          PrintDebug("PreviousSub"); (yyval.inst)=PreviousSub(NULL, NULL);
                                        }
    break;

  case 61:

    { 
                                          PrintDebug("PreviousSub(...)");
                                          (yyval.inst)=PreviousSub((yyvsp[(3) - (4)].tcd), NULL);
                                        }
    break;

  case 62:

    { 
                                          PrintDebug("PreviousSub(..., ...)");
                                          (yyval.inst)=PreviousSub((yyvsp[(3) - (6)].tcd), (yyvsp[(5) - (6)].inst));
                                        }
    break;

  case 63:

    { 
                                          PrintDebug("PreviousSubIn(..., ...)");
                                          (yyval.inst)=PreviousSubIn((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].tcd), NULL);
                                        }
    break;

  case 64:

    { 
                                          PrintDebug("PreviousSubIn(..., ..., ...)");
                                          (yyval.inst)=PreviousSubIn((yyvsp[(3) - (8)].inst), (yyvsp[(5) - (8)].tcd), (yyvsp[(7) - (8)].inst));
                                        }
    break;

  case 65:

    { PrintDebug("N");CopyInst(&(yyval.inst),N); }
    break;

  case 66:

    { PrintDebug("NT");CopyInst(&(yyval.inst),NT); }
    break;

  case 67:

    { PrintDebug("NS");CopyInst(&(yyval.inst),NS); }
    break;

  case 68:

    { PrintDebug("NO");CopyInst(&(yyval.inst),NO); }
    break;

  case 69:

    { PrintDebug("NTO"); CopyInst(&(yyval.inst),NTO); }
    break;

  case 70:

    { PrintDebug("NSO");CopyInst(&(yyval.inst),NSO); }
    break;

  case 71:

    { PrintDebug("NEW");CopyInst(&(yyval.inst),NEW); }
    break;

  case 72:

    { PrintDebug("NEWEST");CopyInst(&(yyval.inst),NEWEST); }
    break;

  case 73:

    { PrintDebug("S");CopyInst(&(yyval.inst),S); }
    break;

  case 74:

    { PrintDebug("D");CopyInst(&(yyval.inst),D); }
    break;

  case 75:

    { PrintDebug("CD");
                                          typestr2 ptr = ReadCD((yyvsp[(1) - (1)].tcd));
                                          FreeCD((yyvsp[(1) - (1)].tcd));
                                          (yyval.inst)=AllocTypeInst();
                                          (yyval.inst)->str = ptr;
                                          (yyval.inst)->val = 0;
                                        }
    break;

  case 76:

    { PrintDebug("...+...");(yyval.inst)=Add((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 77:

    { PrintDebug("...-...");(yyval.inst)=Subtract((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 78:

    { PrintDebug("...*...");(yyval.inst)=Multiply((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 79:

    { PrintDebug("...:...");(yyval.inst)=Divide((yyvsp[(1) - (3)].inst),(yyvsp[(3) - (3)].inst)); (yyvsp[(1) - (3)].inst)=(yyvsp[(3) - (3)].inst)=NULL; }
    break;

  case 80:

    { PrintDebug("Str(...)");(yyval.inst)=String((yyvsp[(3) - (4)].inst)); }
    break;

  case 81:

    { PrintDebug("Val(...)");(yyval.inst)=Value((yyvsp[(3) - (4)].inst)); }
    break;

  case 82:

    { PrintDebug("Len(...)");(yyval.inst)=Len((yyvsp[(3) - (4)].inst)); }
    break;

  case 83:

    { PrintDebug("Upper(...)");(yyval.inst)=Upper((yyvsp[(3) - (4)].inst)); }
    break;

  case 84:

    { PrintDebug("Lower(...)");(yyval.inst)=Lower((yyvsp[(3) - (4)].inst)); }
    break;

  case 85:

    { PrintDebug("Sto(...)");CopyInst(&(yyval.inst),S); MemSto((yyvsp[(3) - (4)].inst)); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 86:

    { PrintDebug("Sto(...)"); CopyInst(&(yyval.inst),S); MemSto((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].inst)); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 87:

    { PrintDebug("Mem(...)");(yyval.inst)=MemMem((yyvsp[(3) - (4)].inst)); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 88:

    { PrintDebug("Exc(...)");(yyval.inst)=MemExc((yyvsp[(3) - (4)].inst)); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 89:

    { PrintDebug("Clr(...)");CopyInst(&(yyval.inst),S); MemClr((yyvsp[(3) - (4)].inst)); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 90:

    { PrintDebug("From(...)");(yyval.inst)=From((yyvsp[(3) - (4)].inst), false); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 91:

    { PrintDebug("From(...,_STRICT)");(yyval.inst)=From((yyvsp[(3) - (6)].inst), true); (yyvsp[(3) - (6)].inst)=NULL; }
    break;

  case 92:

    { PrintDebug("To(...)");(yyval.inst)=To((yyvsp[(3) - (4)].inst), false); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 93:

    { PrintDebug("To(...,_STRICT)");(yyval.inst)=To((yyvsp[(3) - (6)].inst), true); (yyvsp[(3) - (6)].inst)=NULL; }
    break;

  case 94:

    { PrintDebug("Between(...)");(yyval.inst)=Between((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].inst), false); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 95:

    { PrintDebug("Between(...,_STRICT)");(yyval.inst)=Between((yyvsp[(3) - (8)].inst), (yyvsp[(5) - (8)].inst), true); (yyvsp[(3) - (8)].inst)=(yyvsp[(5) - (8)].inst)=NULL; }
    break;

  case 96:

    { PrintDebug("Delete(...)");(yyval.inst)=Replace((yyvsp[(3) - (4)].inst), NULL, SP_ANY, 0); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 97:

    { PrintDebug("Delete(..., AT BEGINING)");(yyval.inst)=Replace((yyvsp[(3) - (7)].inst), NULL, SP_BEGINNING, false); (yyvsp[(3) - (7)].inst)=NULL; }
    break;

  case 98:

    { PrintDebug("Delete(..., AT BEGINNING)");(yyval.inst)=Replace((yyvsp[(3) - (7)].inst), NULL, SP_BEGINNING, false); (yyvsp[(3) - (7)].inst)=NULL; }
    break;

  case 99:

    { PrintDebug("Delete(..., AT END)");(yyval.inst)=Replace((yyvsp[(3) - (7)].inst), NULL, SP_END, false); (yyvsp[(3) - (7)].inst)=NULL; }
    break;

  case 100:

    { PrintDebug("Delete(...,EVERYWHERE)");(yyval.inst)=Replace((yyvsp[(3) - (7)].inst), NULL, SP_BOTH, false); (yyvsp[(3) - (7)].inst)=NULL; }
    break;

  case 101:

    { PrintDebug("Delete(...)");(yyval.inst)=Replace((yyvsp[(3) - (6)].inst), NULL, SP_ANY, true); (yyvsp[(3) - (6)].inst)=NULL; }
    break;

  case 102:

    { PrintDebug("Delete(..., AT BEGINING)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), NULL, SP_BEGINNING, true); (yyvsp[(3) - (9)].inst)=NULL; }
    break;

  case 103:

    { PrintDebug("Delete(..., AT BEGINNING)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), NULL, SP_BEGINNING, true); (yyvsp[(3) - (9)].inst)=NULL; }
    break;

  case 104:

    { PrintDebug("Delete(..., AT END)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), NULL, SP_END, true); (yyvsp[(3) - (9)].inst)=NULL; }
    break;

  case 105:

    { PrintDebug("replace(...,AT BOTH)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), NULL, SP_BOTH, true); (yyvsp[(3) - (9)].inst)=NULL; }
    break;

  case 106:

    { PrintDebug("replace(...)");(yyval.inst)=Replace((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].inst), SP_ANY, false); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 107:

    { PrintDebug("replace(..., AT BEGINING)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), (yyvsp[(5) - (9)].inst), SP_BEGINNING, false); (yyvsp[(3) - (9)].inst)=(yyvsp[(5) - (9)].inst)=NULL; }
    break;

  case 108:

    { PrintDebug("replace(..., AT BEGINNING)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), (yyvsp[(5) - (9)].inst), SP_BEGINNING, false); (yyvsp[(3) - (9)].inst)=(yyvsp[(5) - (9)].inst)=NULL; }
    break;

  case 109:

    { PrintDebug("replace(..., AT END)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), (yyvsp[(5) - (9)].inst), SP_END, false); (yyvsp[(3) - (9)].inst)=(yyvsp[(5) - (9)].inst)=NULL; }
    break;

  case 110:

    { PrintDebug("replace(...,EVERYWHERE)");(yyval.inst)=Replace((yyvsp[(3) - (9)].inst), (yyvsp[(5) - (9)].inst), SP_BOTH, false); (yyvsp[(3) - (9)].inst)=(yyvsp[(5) - (9)].inst)=NULL; }
    break;

  case 111:

    { PrintDebug("replace(...)");(yyval.inst)=Replace((yyvsp[(3) - (8)].inst), (yyvsp[(5) - (8)].inst), SP_ANY, true); (yyvsp[(3) - (8)].inst)=(yyvsp[(5) - (8)].inst)=NULL; }
    break;

  case 112:

    { PrintDebug("replace(..., AT BEGINING)");(yyval.inst)=Replace((yyvsp[(3) - (11)].inst), (yyvsp[(5) - (11)].inst), SP_BEGINNING, true); (yyvsp[(3) - (11)].inst)=(yyvsp[(5) - (11)].inst)=NULL; }
    break;

  case 113:

    { PrintDebug("replace(..., AT BEGINNING)");(yyval.inst)=Replace((yyvsp[(3) - (11)].inst), (yyvsp[(5) - (11)].inst), SP_BEGINNING, true); (yyvsp[(3) - (11)].inst)=(yyvsp[(5) - (11)].inst)=NULL; }
    break;

  case 114:

    { PrintDebug("replace(..., AT END)");(yyval.inst)=Replace((yyvsp[(3) - (11)].inst), (yyvsp[(5) - (11)].inst), SP_END, true); (yyvsp[(3) - (11)].inst)=(yyvsp[(5) - (11)].inst)=NULL; }
    break;

  case 115:

    { PrintDebug("replace(...,EVERYWHERE)");(yyval.inst)=Replace((yyvsp[(3) - (11)].inst), (yyvsp[(5) - (11)].inst), SP_BOTH, true); (yyvsp[(3) - (11)].inst)=(yyvsp[(5) - (11)].inst)=NULL; }
    break;

  case 116:

    { PrintDebug("replace(...,Occ)");(yyval.inst)=ReplaceOcc((yyvsp[(3) - (8)].inst), (yyvsp[(5) - (8)].inst), (yyvsp[(7) - (8)].inst), false); (yyvsp[(3) - (8)].inst)=(yyvsp[(5) - (8)].inst)=(yyvsp[(7) - (8)].inst)=NULL; }
    break;

  case 117:

    { PrintDebug("replace(...,Occ)");(yyval.inst)=ReplaceOcc((yyvsp[(3) - (10)].inst), (yyvsp[(5) - (10)].inst), (yyvsp[(7) - (10)].inst), true); (yyvsp[(3) - (10)].inst)=(yyvsp[(5) - (10)].inst)=(yyvsp[(7) - (10)].inst)=NULL; }
    break;

  case 118:

    { PrintDebug("BFirst(...)");(yyval.inst)=BFirst((yyvsp[(3) - (4)].inst),0); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 119:

    { PrintDebug("BFirst(Number)");(yyval.inst)=BFirst(NULL,1); }
    break;

  case 120:

    { PrintDebug("BFirst(String)");(yyval.inst)=BFirst(NULL,2); }
    break;

  case 121:

    { PrintDebug("EFirst(...)");(yyval.inst)=EFirst((yyvsp[(3) - (4)].inst),0); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 122:

    { PrintDebug("EFirst(Number)");(yyval.inst)=EFirst(NULL,1); }
    break;

  case 123:

    { PrintDebug("EFirst(String)");(yyval.inst)=EFirst(NULL,2); }
    break;

  case 124:

    { PrintDebug("BLast(...)");(yyval.inst)=BLast((yyvsp[(3) - (4)].inst),0); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 125:

    { PrintDebug("BLast(Number)");(yyval.inst)=BLast(NULL,1); }
    break;

  case 126:

    { PrintDebug("BLast(String)");(yyval.inst)=BLast(NULL,2); }
    break;

  case 127:

    { PrintDebug("ELast(...)");(yyval.inst)=ELast((yyvsp[(3) - (4)].inst),0); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 128:

    { PrintDebug("ELast(Number)");(yyval.inst)=ELast(NULL,1); }
    break;

  case 129:

    { PrintDebug("ELast(String)");(yyval.inst)=ELast(NULL,2); }
    break;

  case 130:

    { PrintDebug("Next(...)");(yyval.inst)=Next_((yyvsp[(3) - (4)].tcd),NULL,0); (yyvsp[(3) - (4)].tcd)=NULL; }
    break;

  case 131:

    { PrintDebug("Next(...,...)");
                                          (yyval.inst)=Next_((yyvsp[(3) - (6)].tcd),(yyvsp[(5) - (6)].tcd),0);
                                          if (!(yyval.inst)) return 2;
                                          (yyvsp[(3) - (6)].tcd)=(yyvsp[(5) - (6)].tcd)=NULL; }
    break;

  case 132:

    { PrintDebug("Next(...,_STRICT)");
                                          (yyval.inst)=Next_((yyvsp[(3) - (6)].tcd),NULL,1);
                                          if (!(yyval.inst)) return 2;
                                          (yyvsp[(3) - (6)].tcd)=NULL; }
    break;

  case 133:

    { PrintDebug("Next(...,...,_STRICT)");
                                          (yyval.inst)=Next_((yyvsp[(3) - (8)].tcd),(yyvsp[(5) - (8)].tcd),1);
                                          if (!(yyval.inst)) return 2;
                                          (yyvsp[(3) - (8)].tcd)=(yyvsp[(5) - (8)].tcd)=NULL; }
    break;

  case 134:

    { PrintDebug("Last(...)");
                                          (yyval.inst)=Last_((yyvsp[(3) - (4)].tcd),NULL,0);
                                          if (!(yyval.inst)) return 2;
                                          (yyvsp[(3) - (4)].tcd)=NULL; }
    break;

  case 135:

    { PrintDebug("Last(...,...)");
                                          (yyval.inst)=Last_((yyvsp[(3) - (6)].tcd),(yyvsp[(5) - (6)].tcd),0);
                                          if (!(yyval.inst)) return 2;
                                          (yyvsp[(3) - (6)].tcd)=(yyvsp[(5) - (6)].tcd)=NULL; }
    break;

  case 136:

    { PrintDebug("Last(...,_STRICT)");
                                          (yyval.inst)=Last_((yyvsp[(3) - (6)].tcd),NULL,1);
                                          if (!(yyval.inst)) return 2;
                                          (yyvsp[(3) - (6)].tcd)=NULL; }
    break;

  case 137:

    { PrintDebug("Last(...,...,_STRICT)");
                                          (yyval.inst)=Last_((yyvsp[(3) - (8)].tcd),(yyvsp[(5) - (8)].tcd),1);
                                          if (!(yyval.inst)) return 2;
                                          (yyvsp[(3) - (8)].tcd)=(yyvsp[(5) - (8)].tcd)=NULL; }
    break;

  case 138:

    { PrintDebug("Sort");
                                  MustSort((yyvsp[(3) - (4)].inst)->str.str());
                                  FreeTypeInst((yyvsp[(3) - (4)].inst));
                                  (yyvsp[(3) - (4)].inst)=NULL;
                                  return 2;
                                }
    break;

  case 139:

    { PrintDebug("Table(...)");(yyval.inst)=Table_((yyvsp[(3) - (4)].inst)); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 140:

    { PrintDebug("RegFindNum(...)");(yyval.inst)=RegFindNum((yyvsp[(3) - (4)].inst), NULL); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 141:

    { PrintDebug("RegFindNum(...,...)");(yyval.inst)=RegFindNum((yyvsp[(3) - (6)].inst),(yyvsp[(5) - (6)].inst)); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 142:

    { PrintDebug("RegFindPos(...)");(yyval.inst)=RegFindPos((yyvsp[(3) - (4)].inst), NULL); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 143:

    { PrintDebug("RegFindPos(...,...)");(yyval.inst)=RegFindPos((yyvsp[(3) - (6)].inst),(yyvsp[(5) - (6)].inst)); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 144:

    { PrintDebug("RegFind(...)");(yyval.inst)=RegFind((yyvsp[(3) - (4)].inst), NULL); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 145:

    { PrintDebug("RegFind(...,...)");(yyval.inst)=RegFind((yyvsp[(3) - (6)].inst),(yyvsp[(5) - (6)].inst)); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 146:

    { PrintDebug("RegMatch(...)");(yyval.inst)=RegMatch((yyvsp[(3) - (4)].inst)); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 147:

    { PrintDebug("RegReplace(...,...)");(yyval.inst)=RegReplace((yyvsp[(3) - (6)].inst),(yyvsp[(5) - (6)].inst),NULL); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 148:

    { PrintDebug("RegReplace(...,...,...)");(yyval.inst)=RegReplace((yyvsp[(3) - (8)].inst),(yyvsp[(5) - (8)].inst),(yyvsp[(7) - (8)].inst)); (yyvsp[(3) - (8)].inst)=(yyvsp[(5) - (8)].inst)=(yyvsp[(7) - (8)].inst)=NULL; }
    break;

  case 149:

    { PrintDebug("RegReplaceTable(...,...)");(yyval.inst)=RegReplaceTable((yyvsp[(3) - (4)].inst),NULL); (yyvsp[(3) - (4)].inst)=NULL; }
    break;

  case 150:

    { PrintDebug("RegReplaceTable(...,...)");(yyval.inst)=RegReplaceTable((yyvsp[(3) - (6)].inst),(yyvsp[(5) - (6)].inst)); (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; }
    break;

  case 151:

    { PrintDebug("MoveBefore(..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].tcd), NULL, NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (6)].inst)=NULL; 
                                          (yyvsp[(5) - (6)].tcd)=NULL;
                                        }
    break;

  case 152:

    { PrintDebug("MoveBefore(..., ..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (8)].inst), (yyvsp[(5) - (8)].tcd), (yyvsp[(7) - (8)].inst), NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (8)].inst)=(yyvsp[(7) - (8)].inst)=NULL; 
                                          (yyvsp[(5) - (8)].tcd)=NULL;
                                        }
    break;

  case 153:

    { PrintDebug("MoveBefore(..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (12)].inst), (yyvsp[(5) - (12)].tcd), (yyvsp[(7) - (12)].inst), (yyvsp[(9) - (12)].inst), (yyvsp[(11) - (12)].inst), NULL, NULL); 
                                          (yyvsp[(3) - (12)].inst)=(yyvsp[(7) - (12)].inst)=(yyvsp[(9) - (12)].inst)=(yyvsp[(11) - (12)].inst)=NULL; 
                                          (yyvsp[(5) - (12)].tcd)=NULL;
                                        }
    break;

  case 154:

    { PrintDebug("MoveBefore(..., ..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (14)].inst), (yyvsp[(5) - (14)].tcd), (yyvsp[(7) - (14)].inst), (yyvsp[(9) - (14)].inst), (yyvsp[(11) - (14)].inst), (yyvsp[(13) - (14)].inst), NULL); 
                                          (yyvsp[(3) - (14)].inst)=(yyvsp[(7) - (14)].inst)=(yyvsp[(9) - (14)].inst)=(yyvsp[(11) - (14)].inst)=(yyvsp[(13) - (14)].inst)=NULL; 
                                          (yyvsp[(5) - (14)].tcd)=NULL;
                                        }
    break;

  case 155:

    { PrintDebug("MoveBefore(..., ..., ..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (16)].inst), (yyvsp[(5) - (16)].tcd), (yyvsp[(7) - (16)].inst), (yyvsp[(9) - (16)].inst), (yyvsp[(11) - (16)].inst), (yyvsp[(13) - (16)].inst), (yyvsp[(15) - (16)].inst)); 
                                          (yyvsp[(3) - (16)].inst)=(yyvsp[(7) - (16)].inst)=(yyvsp[(9) - (16)].inst)=(yyvsp[(11) - (16)].inst)=(yyvsp[(13) - (16)].inst)=(yyvsp[(15) - (16)].inst)=NULL; 
                                          (yyvsp[(5) - (16)].tcd)=NULL;
                                        }
    break;

  case 156:

    { PrintDebug("MoveAfter(..., ..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (8)].inst), (yyvsp[(5) - (8)].tcd), (yyvsp[(7) - (8)].inst), NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (8)].inst)=(yyvsp[(7) - (8)].inst)=NULL; 
                                          (yyvsp[(5) - (8)].tcd)=NULL;
                                        }
    break;

  case 157:

    { PrintDebug("MoveAfter(..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (6)].inst), (yyvsp[(5) - (6)].tcd), NULL, NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (6)].inst)=NULL; 
                                          (yyvsp[(5) - (6)].tcd)=NULL;
                                        }
    break;

  case 158:

    { PrintDebug("MoveAfter(..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (12)].inst), (yyvsp[(5) - (12)].tcd), (yyvsp[(7) - (12)].inst), (yyvsp[(9) - (12)].inst), (yyvsp[(11) - (12)].inst), NULL, NULL); 
                                          (yyvsp[(3) - (12)].inst)=(yyvsp[(7) - (12)].inst)=(yyvsp[(9) - (12)].inst)=(yyvsp[(11) - (12)].inst)=NULL; 
                                          (yyvsp[(5) - (12)].tcd)=NULL;
                                        }
    break;

  case 159:

    { PrintDebug("MoveAfter(..., ..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (14)].inst), (yyvsp[(5) - (14)].tcd), (yyvsp[(7) - (14)].inst), (yyvsp[(9) - (14)].inst), (yyvsp[(11) - (14)].inst), (yyvsp[(13) - (14)].inst), NULL); 
                                          (yyvsp[(3) - (14)].inst)=(yyvsp[(7) - (14)].inst)=(yyvsp[(9) - (14)].inst)=(yyvsp[(11) - (14)].inst)=(yyvsp[(13) - (14)].inst)=NULL; 
                                          (yyvsp[(5) - (14)].tcd)=NULL;
                                        }
    break;

  case 160:

    { PrintDebug("MoveAfter(..., ..., ..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (16)].inst), (yyvsp[(5) - (16)].tcd), (yyvsp[(7) - (16)].inst), (yyvsp[(9) - (16)].inst), (yyvsp[(11) - (16)].inst), (yyvsp[(13) - (16)].inst), (yyvsp[(15) - (16)].inst)); 
                                          (yyvsp[(3) - (16)].inst)=(yyvsp[(7) - (16)].inst)=(yyvsp[(9) - (16)].inst)=(yyvsp[(11) - (16)].inst)=(yyvsp[(13) - (16)].inst)=(yyvsp[(15) - (16)].inst)=NULL; 
                                          (yyvsp[(5) - (16)].tcd)=NULL;
                                        }
    break;

  case 161:

    { PrintDebug("MoveFirst(...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (4)].inst), NULL, NULL, NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (4)].inst)=NULL; 
                                        }
    break;

  case 162:

    { PrintDebug("MoveFirst(..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (6)].inst), NULL, (yyvsp[(5) - (6)].inst), NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; 
                                        }
    break;

  case 163:

    { PrintDebug("MoveFirst(..., ..., ..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (10)].inst), NULL, (yyvsp[(5) - (10)].inst), (yyvsp[(7) - (10)].inst), (yyvsp[(9) - (10)].inst), NULL, NULL); 
                                          (yyvsp[(3) - (10)].inst)=(yyvsp[(5) - (10)].inst)=(yyvsp[(7) - (10)].inst)=(yyvsp[(9) - (10)].inst)=NULL; 
                                        }
    break;

  case 164:

    { PrintDebug("MoveFirst(..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (12)].inst), NULL, (yyvsp[(5) - (12)].inst), (yyvsp[(7) - (12)].inst), (yyvsp[(9) - (12)].inst), (yyvsp[(11) - (12)].inst), NULL); 
                                          (yyvsp[(3) - (12)].inst)=(yyvsp[(5) - (12)].inst)=(yyvsp[(7) - (12)].inst)=(yyvsp[(9) - (12)].inst)=(yyvsp[(11) - (12)].inst)=NULL; 
                                        }
    break;

  case 165:

    { PrintDebug("MoveFirst(..., ..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveBefore((yyvsp[(3) - (14)].inst), NULL, (yyvsp[(5) - (14)].inst), (yyvsp[(7) - (14)].inst), (yyvsp[(9) - (14)].inst), (yyvsp[(11) - (14)].inst), (yyvsp[(13) - (14)].inst)); 
                                          (yyvsp[(3) - (14)].inst)=(yyvsp[(5) - (14)].inst)=(yyvsp[(7) - (14)].inst)=(yyvsp[(9) - (14)].inst)=(yyvsp[(11) - (14)].inst)=(yyvsp[(13) - (14)].inst)=NULL; 
                                        }
    break;

  case 166:

    { PrintDebug("MoveLast(...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (4)].inst), NULL, NULL, NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (4)].inst)=NULL; 
                                        }
    break;

  case 167:

    { PrintDebug("MoveLast(..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (6)].inst), NULL, (yyvsp[(5) - (6)].inst), NULL, NULL, NULL, NULL); 
                                          (yyvsp[(3) - (6)].inst)=(yyvsp[(5) - (6)].inst)=NULL; 
                                        }
    break;

  case 168:

    { PrintDebug("MoveLast(..., ..., ..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (10)].inst), NULL, (yyvsp[(5) - (10)].inst), (yyvsp[(7) - (10)].inst), (yyvsp[(9) - (10)].inst), NULL, NULL); 
                                          (yyvsp[(3) - (10)].inst)=(yyvsp[(5) - (10)].inst)=(yyvsp[(7) - (10)].inst)=(yyvsp[(9) - (10)].inst)=NULL; 
                                        }
    break;

  case 169:

    { PrintDebug("MoveLast(..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (12)].inst), NULL, (yyvsp[(5) - (12)].inst), (yyvsp[(7) - (12)].inst), (yyvsp[(9) - (12)].inst), (yyvsp[(11) - (12)].inst), NULL); 
                                          (yyvsp[(3) - (12)].inst)=(yyvsp[(5) - (12)].inst)=(yyvsp[(7) - (12)].inst)=(yyvsp[(9) - (12)].inst)=(yyvsp[(11) - (12)].inst)=NULL; 
                                        }
    break;

  case 170:

    { PrintDebug("MoveLast(..., ..., ..., ..., ..., ...)");
                                          (yyval.inst)=MoveAfter((yyvsp[(3) - (14)].inst), NULL, (yyvsp[(5) - (14)].inst), (yyvsp[(7) - (14)].inst), (yyvsp[(9) - (14)].inst), (yyvsp[(11) - (14)].inst), (yyvsp[(13) - (14)].inst)); 
                                          (yyvsp[(3) - (14)].inst)=(yyvsp[(5) - (14)].inst)=(yyvsp[(7) - (14)].inst)=(yyvsp[(9) - (14)].inst)=(yyvsp[(11) - (14)].inst)=(yyvsp[(13) - (14)].inst)=NULL; 
                                        }
    break;


/* Line 1267 of yacc.c.  */

      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}
